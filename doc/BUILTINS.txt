*BUILTINS.txt*                                       Last change: 2023 July 13

==============================================================================
Table of Contents                                  *null-ls-table-of-contents*

Code Actions .......................................... |null-ls-code-actions|
[cspell](https://github.com/streetsidesoftware/cspell)  |null-ls-[cspell](https://github.com/streetsidesoftware/cspell)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
Config ...................................................... |null-ls-config|
Notes ........................................................ |null-ls-notes|
[eslint](https://github.com/eslint/eslint)  |null-ls-[eslint](https://github.com/eslint/eslint)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[eslint_d](https://github.com/mantoni/eslint_d.js)  |null-ls-[eslint_d](https://github.com/mantoni/eslint_d.js)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
Notes ........................................................ |null-ls-notes|
gitrebase ................................................ |null-ls-gitrebase|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[gitsigns](https://github.com/lewis6991/gitsigns.nvim)  |null-ls-[gitsigns](https://github.com/lewis6991/gitsigns.nvim)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
Config ...................................................... |null-ls-config|
[gomodifytags](https://github.com/fatih/gomodifytags)  |null-ls-[gomodifytags](https://github.com/fatih/gomodifytags)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
Notes ........................................................ |null-ls-notes|
[impl](https://github.com/josharian/impl)  |null-ls-[impl](https://github.com/josharian/impl)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
Notes ........................................................ |null-ls-notes|
[ltrs](https://github.com/jeertmans/languagetool-rust)  |null-ls-[ltrs](https://github.com/jeertmans/languagetool-rust)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[proselint](https://github.com/amperser/proselint)  |null-ls-[proselint](https://github.com/amperser/proselint)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[refactoring](https://github.com/ThePrimeagen/refactoring.nvim)  |null-ls-[refactoring](https://github.com/theprimeagen/refactoring.nvim)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
Notes ........................................................ |null-ls-notes|
[shellcheck](https://www.shellcheck.net/)  |null-ls-[shellcheck](https://www.shellcheck.net/)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
Notes ........................................................ |null-ls-notes|
[statix](https://github.com/nerdypepper/statix)  |null-ls-[statix](https://github.com/nerdypepper/statix)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[ts_node_action](https://github.com/CKolkey/ts-node-action)  |null-ls-[ts_node_action](https://github.com/ckolkey/ts-node-action)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[xo](https://github.com/xojs/xo) .. |null-ls-[xo](https://github.com/xojs/xo)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
Completion .............................................. |null-ls-completion|
[luasnip](https://github.com/L3MON4D3/LuaSnip)  |null-ls-[luasnip](https://github.com/l3mon4d3/luasnip)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
Notes ........................................................ |null-ls-notes|
spell ........................................................ |null-ls-spell|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
tags .......................................................... |null-ls-tags|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[vsnip](https://github.com/hrsh7th/vim-vsnip)  |null-ls-[vsnip](https://github.com/hrsh7th/vim-vsnip)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
Notes ........................................................ |null-ls-notes|
Diagnostics ............................................ |null-ls-diagnostics|
[actionlint](https://github.com/rhysd/actionlint)  |null-ls-[actionlint](https://github.com/rhysd/actionlint)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[alex](https://github.com/get-alex/alex)  |null-ls-[alex](https://github.com/get-alex/alex)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[ansiblelint](https://github.com/ansible-community/ansible-lint)  |null-ls-[ansiblelint](https://github.com/ansible-community/ansible-lint)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[bslint](https://github.com/rokucommunity/bslint)  |null-ls-[bslint](https://github.com/rokucommunity/bslint)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[buf](https://github.com/bufbuild/buf)  |null-ls-[buf](https://github.com/bufbuild/buf)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[buildifier](https://github.com/bazelbuild/buildtools/tree/master/buildifier)  |null-ls-[buildifier](https://github.com/bazelbuild/buildtools/tree/master/buildifier)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[cfn_lint](https://github.com/aws-cloudformation/cfn-lint)  |null-ls-[cfn_lint](https://github.com/aws-cloudformation/cfn-lint)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
Notes ........................................................ |null-ls-notes|
[checkmake](https://github.com/mrtazz/checkmake)  |null-ls-[checkmake](https://github.com/mrtazz/checkmake)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[checkstyle](https://checkstyle.org)  |null-ls-[checkstyle](https://checkstyle.org)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
Notes ........................................................ |null-ls-notes|
[chktex](https://www.nongnu.org/chktex/)  |null-ls-[chktex](https://www.nongnu.org/chktex/)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[clang_check](https://releases.llvm.org/14.0.0/tools/clang/docs/ClangTools.html)  |null-ls-[clang_check](https://releases.llvm.org/14.0.0/tools/clang/docs/clangtools.html)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
Notes ........................................................ |null-ls-notes|
[clazy](https://github.com/KDE/clazy)  |null-ls-[clazy](https://github.com/kde/clazy)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
Notes ........................................................ |null-ls-notes|
[clj_kondo](https://github.com/clj-kondo/clj-kondo)  |null-ls-[clj_kondo](https://github.com/clj-kondo/clj-kondo)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[cmake_lint](https://github.com/cheshirekow/cmake_format)  |null-ls-[cmake_lint](https://github.com/cheshirekow/cmake_format)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[codespell](https://github.com/codespell-project/codespell)  |null-ls-[codespell](https://github.com/codespell-project/codespell)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[commitlint](https://commitlint.js.org)  |null-ls-[commitlint](https://commitlint.js.org)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
Notes ........................................................ |null-ls-notes|
[cppcheck](https://github.com/danmar/cppcheck)  |null-ls-[cppcheck](https://github.com/danmar/cppcheck)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[cpplint](https://github.com/cpplint/cpplint)  |null-ls-[cpplint](https://github.com/cpplint/cpplint)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[credo](https://hexdocs.pm/credo)  |null-ls-[credo](https://hexdocs.pm/credo)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
Notes ........................................................ |null-ls-notes|
[cspell](https://github.com/streetsidesoftware/cspell)  |null-ls-[cspell](https://github.com/streetsidesoftware/cspell)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[cue_fmt](https://github.com/cue-lang/cue)  |null-ls-[cue_fmt](https://github.com/cue-lang/cue)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[curlylint](https://www.curlylint.org/)  |null-ls-[curlylint](https://www.curlylint.org/)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[deadnix](https://github.com/astro/deadnix)  |null-ls-[deadnix](https://github.com/astro/deadnix)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[deno_lint](https://github.com/denoland/deno_lint)  |null-ls-[deno_lint](https://github.com/denoland/deno_lint)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[djlint](https://github.com/Riverside-Healthcare/djLint)  |null-ls-[djlint](https://github.com/riverside-healthcare/djlint)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[dotenv_linter](https://github.com/dotenv-linter/dotenv-linter)  |null-ls-[dotenv_linter](https://github.com/dotenv-linter/dotenv-linter)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[editorconfig_checker](https://github.com/editorconfig-checker/editorconfig-checker)  |null-ls-[editorconfig_checker](https://github.com/editorconfig-checker/editorconfig-checker)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[erb_lint](https://github.com/Shopify/erb-lint)  |null-ls-[erb_lint](https://github.com/shopify/erb-lint)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[eslint](https://github.com/eslint/eslint)  |null-ls-[eslint](https://github.com/eslint/eslint)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[eslint_d](https://github.com/mantoni/eslint_d.js/)  |null-ls-[eslint_d](https://github.com/mantoni/eslint_d.js/)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
Notes ........................................................ |null-ls-notes|
[fish](https://github.com/fish-shell/fish-shell)  |null-ls-[fish](https://github.com/fish-shell/fish-shell)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[flake8](https://github.com/PyCQA/flake8)  |null-ls-[flake8](https://github.com/pycqa/flake8)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[gccdiag](https://gitlab.com/andrejr/gccdiag)  |null-ls-[gccdiag](https://gitlab.com/andrejr/gccdiag)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[gdlint](https://github.com/Scony/godot-gdscript-toolkit)  |null-ls-[gdlint](https://github.com/scony/godot-gdscript-toolkit)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[gitlint](https://jorisroovers.com/gitlint/)  |null-ls-[gitlint](https://jorisroovers.com/gitlint/)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[glslc](https://github.com/google/shaderc)  |null-ls-[glslc](https://github.com/google/shaderc)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
Notes ........................................................ |null-ls-notes|
[golangci_lint](https://golangci-lint.run/)  |null-ls-[golangci_lint](https://golangci-lint.run/)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[gospel](https://github.com/kortschak/gospel)  |null-ls-[gospel](https://github.com/kortschak/gospel)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[hadolint](https://github.com/hadolint/hadolint)  |null-ls-[hadolint](https://github.com/hadolint/hadolint)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[haml_lint](https://github.com/sds/haml-lint)  |null-ls-[haml_lint](https://github.com/sds/haml-lint)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[jshint](https://github.com/jshint/jshint)  |null-ls-[jshint](https://github.com/jshint/jshint)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[jsonlint](https://github.com/zaach/jsonlint)  |null-ls-[jsonlint](https://github.com/zaach/jsonlint)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[ktlint](https://ktlint.github.io/)  |null-ls-[ktlint](https://ktlint.github.io/)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[ltrs](https://github.com/jeertmans/languagetool-rust)  |null-ls-[ltrs](https://github.com/jeertmans/languagetool-rust)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[luacheck](https://github.com/lunarmodules/luacheck)  |null-ls-[luacheck](https://github.com/lunarmodules/luacheck)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[markdownlint](https://github.com/DavidAnson/markdownlint)  |null-ls-[markdownlint](https://github.com/davidanson/markdownlint)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[markdownlint_cli2](https://github.com/DavidAnson/markdownlint-cli2)  |null-ls-[markdownlint_cli2](https://github.com/davidanson/markdownlint-cli2)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
Notes ........................................................ |null-ls-notes|
[markuplint](https://github.com/markuplint/markuplint)  |null-ls-[markuplint](https://github.com/markuplint/markuplint)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[mdl](https://github.com/markdownlint/markdownlint)  |null-ls-[mdl](https://github.com/markdownlint/markdownlint)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[misspell](https://github.com/client9/misspell)  |null-ls-[misspell](https://github.com/client9/misspell)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[mlint](https://www.mathworks.com/help/matlab/ref/mlint.html)  |null-ls-[mlint](https://www.mathworks.com/help/matlab/ref/mlint.html)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[mypy](https://github.com/python/mypy)  |null-ls-[mypy](https://github.com/python/mypy)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[npm_groovy_lint](https://github.com/nvuillam/npm-groovy-lint)  |null-ls-[npm_groovy_lint](https://github.com/nvuillam/npm-groovy-lint)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[opacheck](https://www.openpolicyagent.org/docs/latest/cli/#opa-check)  |null-ls-[opacheck](https://www.openpolicyagent.org/docs/latest/cli/#opa-check)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[perlimports](https://metacpan.org/dist/App-perlimports/view/script/perlimports)  |null-ls-[perlimports](https://metacpan.org/dist/app-perlimports/view/script/perlimports)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[php](https://www.php.net/) ............ |null-ls-[php](https://www.php.net/)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[phpcs](https://github.com/squizlabs/PHP_CodeSniffer)  |null-ls-[phpcs](https://github.com/squizlabs/php_codesniffer)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[phpmd](https://github.com/phpmd/phpmd/)  |null-ls-[phpmd](https://github.com/phpmd/phpmd/)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[phpstan](https://github.com/phpstan/phpstan)  |null-ls-[phpstan](https://github.com/phpstan/phpstan)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
Notes ........................................................ |null-ls-notes|
[pmd](https://pmd.github.io) .......... |null-ls-[pmd](https://pmd.github.io)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
Notes ........................................................ |null-ls-notes|
[proselint](https://github.com/amperser/proselint)  |null-ls-[proselint](https://github.com/amperser/proselint)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[protoc_gen_lint](https://github.com/ckaznocha/protoc-gen-lint)  |null-ls-[protoc_gen_lint](https://github.com/ckaznocha/protoc-gen-lint)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[protolint](https://github.com/yoheimuta/protolint)  |null-ls-[protolint](https://github.com/yoheimuta/protolint)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[psalm](https://psalm.dev/) ............ |null-ls-[psalm](https://psalm.dev/)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[puglint](https://github.com/pugjs/pug-lint)  |null-ls-[puglint](https://github.com/pugjs/pug-lint)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[puppet_lint](http://puppet-lint.com/)  |null-ls-[puppet_lint](http://puppet-lint.com/)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[pycodestyle](https://github.com/PyCQA/pycodestyle)  |null-ls-[pycodestyle](https://github.com/pycqa/pycodestyle)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[pydocstyle](https://www.pydocstyle.org/)  |null-ls-[pydocstyle](https://www.pydocstyle.org/)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
Notes ........................................................ |null-ls-notes|
[pylama](https://github.com/klen/pylama)  |null-ls-[pylama](https://github.com/klen/pylama)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[pylint](https://github.com/PyCQA/pylint)  |null-ls-[pylint](https://github.com/pycqa/pylint)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[pyproject_flake8](https://github.com/csachs/pyproject-flake8)  |null-ls-[pyproject_flake8](https://github.com/csachs/pyproject-flake8)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[qmllint](https://doc-snapshots.qt.io/qt6-dev/qtquick-tools-and-utilities.html#qmllint)  |null-ls-[qmllint](https://doc-snapshots.qt.io/qt6-dev/qtquick-tools-and-utilities.html#qmllint)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[reek](https://github.com/troessner/reek)  |null-ls-[reek](https://github.com/troessner/reek)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[revive](https://revive.run/) ........ |null-ls-[revive](https://revive.run/)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
Notes ........................................................ |null-ls-notes|
[rpmspec](https://rpm.org/) ............ |null-ls-[rpmspec](https://rpm.org/)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[rstcheck](https://github.com/myint/rstcheck)  |null-ls-[rstcheck](https://github.com/myint/rstcheck)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[rubocop](https://rubocop.org/) .... |null-ls-[rubocop](https://rubocop.org/)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[ruff](https://github.com/charliermarsh/ruff/)  |null-ls-[ruff](https://github.com/charliermarsh/ruff/)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[saltlint](https://github.com/warpnet/salt-lint)  |null-ls-[saltlint](https://github.com/warpnet/salt-lint)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[selene](https://kampfkarren.github.io/selene/)  |null-ls-[selene](https://kampfkarren.github.io/selene/)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[semgrep](https://semgrep.dev/) .... |null-ls-[semgrep](https://semgrep.dev/)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[semistandardjs](https://github.com/standard/semistandard)  |null-ls-[semistandardjs](https://github.com/standard/semistandard)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[shellcheck](https://www.shellcheck.net/)  |null-ls-[shellcheck](https://www.shellcheck.net/)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[solhint](https://protofire.github.io/solhint/)  |null-ls-[solhint](https://protofire.github.io/solhint/)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[spectral](https://github.com/stoplightio/spectral)  |null-ls-[spectral](https://github.com/stoplightio/spectral)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[sqlfluff](https://github.com/sqlfluff/sqlfluff)  |null-ls-[sqlfluff](https://github.com/sqlfluff/sqlfluff)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
Notes ........................................................ |null-ls-notes|
[standardjs](https://standardjs.com/)  |null-ls-[standardjs](https://standardjs.com/)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[standardrb](https://github.com/testdouble/standard)  |null-ls-[standardrb](https://github.com/testdouble/standard)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[staticcheck](https://staticcheck.io/)  |null-ls-[staticcheck](https://staticcheck.io/)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
Notes ........................................................ |null-ls-notes|
[statix](https://github.com/nerdypepper/statix)  |null-ls-[statix](https://github.com/nerdypepper/statix)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[stylelint](https://github.com/stylelint/stylelint)  |null-ls-[stylelint](https://github.com/stylelint/stylelint)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[stylint](https://github.com/SimenB/stylint)  |null-ls-[stylint](https://github.com/simenb/stylint)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[swiftlint](https://github.com/realm/SwiftLint)  |null-ls-[swiftlint](https://github.com/realm/swiftlint)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[teal](https://github.com/teal-language/tl)  |null-ls-[teal](https://github.com/teal-language/tl)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[terraform_validate](https://github.com/hashicorp/terraform)  |null-ls-[terraform_validate](https://github.com/hashicorp/terraform)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[textidote](https://github.com/sylvainhalle/textidote)  |null-ls-[textidote](https://github.com/sylvainhalle/textidote)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[textlint](https://github.com/textlint/textlint)  |null-ls-[textlint](https://github.com/textlint/textlint)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[tfsec](https://github.com/aquasecurity/tfsec)  |null-ls-[tfsec](https://github.com/aquasecurity/tfsec)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[tidy](https://www.html-tidy.org/)  |null-ls-[tidy](https://www.html-tidy.org/)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
todo_comments ........................................ |null-ls-todo_comments|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
trail_space ............................................ |null-ls-trail_space|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[tsc](https://www.typescriptlang.org/docs/handbook/compiler-options.html)  |null-ls-[tsc](https://www.typescriptlang.org/docs/handbook/compiler-options.html)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[twigcs](https://github.com/friendsoftwig/twigcs)  |null-ls-[twigcs](https://github.com/friendsoftwig/twigcs)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[typos](https://github.com/crate-ci/typos)  |null-ls-[typos](https://github.com/crate-ci/typos)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[vacuum](https://quobix.com/vacuum)  |null-ls-[vacuum](https://quobix.com/vacuum)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[vale](https://docs.errata.ai/vale/about)  |null-ls-[vale](https://docs.errata.ai/vale/about)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
Notes ........................................................ |null-ls-notes|
[verilator](https://www.veripool.org/verilator/)  |null-ls-[verilator](https://www.veripool.org/verilator/)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[vint](https://github.com/Vimjas/vint)  |null-ls-[vint](https://github.com/vimjas/vint)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[vulture](https://github.com/jendrikseipp/vulture)  |null-ls-[vulture](https://github.com/jendrikseipp/vulture)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[write_good](https://github.com/btford/write-good)  |null-ls-[write_good](https://github.com/btford/write-good)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[xo](https://github.com/xojs/xo) .. |null-ls-[xo](https://github.com/xojs/xo)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[yamllint](https://github.com/adrienverge/yamllint)  |null-ls-[yamllint](https://github.com/adrienverge/yamllint)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[zsh](https://www.zsh.org/) ............ |null-ls-[zsh](https://www.zsh.org/)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
Formatting .............................................. |null-ls-formatting|
[alejandra](https://github.com/kamadorueda/alejandra)  |null-ls-[alejandra](https://github.com/kamadorueda/alejandra)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[asmfmt](https://github.com/klauspost/asmfmt)  |null-ls-[asmfmt](https://github.com/klauspost/asmfmt)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[astyle](http://astyle.sourceforge.net/)  |null-ls-[astyle](http://astyle.sourceforge.net/)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[autoflake](https://github.com/PyCQA/autoflake)  |null-ls-[autoflake](https://github.com/pycqa/autoflake)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[autopep8](https://github.com/hhatto/autopep8)  |null-ls-[autopep8](https://github.com/hhatto/autopep8)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[bean_format](https://beancount.github.io/docs/running_beancount_and_generating_reports.html#bean-format)  |null-ls-[bean_format](https://beancount.github.io/docs/running_beancount_and_generating_reports.html#bean-format)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
Notes ........................................................ |null-ls-notes|
[beautysh](https://github.com/lovesegfault/beautysh)  |null-ls-[beautysh](https://github.com/lovesegfault/beautysh)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
Notes ........................................................ |null-ls-notes|
[bibclean](https://www.ctan.org/pkg/bibclean)  |null-ls-[bibclean](https://www.ctan.org/pkg/bibclean)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
Notes ........................................................ |null-ls-notes|
[black](https://github.com/psf/black)  |null-ls-[black](https://github.com/psf/black)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[blackd](https://github.com/psf/black)  |null-ls-[blackd](https://github.com/psf/black)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
Config ...................................................... |null-ls-config|
[blade_formatter](https://github.com/shufo/blade-formatter)  |null-ls-[blade_formatter](https://github.com/shufo/blade-formatter)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[blue](https://github.com/grantjenks/blue)  |null-ls-[blue](https://github.com/grantjenks/blue)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[brittany](https://github.com/lspitzner/brittany)  |null-ls-[brittany](https://github.com/lspitzner/brittany)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[bsfmt](https://github.com/rokucommunity/brighterscript-formatter)  |null-ls-[bsfmt](https://github.com/rokucommunity/brighterscript-formatter)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[buf](https://github.com/bufbuild/buf)  |null-ls-[buf](https://github.com/bufbuild/buf)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[buildifier](https://github.com/bazelbuild/buildtools/tree/master/buildifier)  |null-ls-[buildifier](https://github.com/bazelbuild/buildtools/tree/master/buildifier)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[cabal_fmt](https://hackage.haskell.org/package/cabal-fmt)  |null-ls-[cabal_fmt](https://hackage.haskell.org/package/cabal-fmt)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[cbfmt](https://github.com/lukas-reineke/cbfmt)  |null-ls-[cbfmt](https://github.com/lukas-reineke/cbfmt)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[clang_format](https://www.kernel.org/doc/html/latest/process/clang-format.html)  |null-ls-[clang_format](https://www.kernel.org/doc/html/latest/process/clang-format.html)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[cljstyle](https://github.com/greglook/cljstyle)  |null-ls-[cljstyle](https://github.com/greglook/cljstyle)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[cmake_format](https://github.com/cheshirekow/cmake_format)  |null-ls-[cmake_format](https://github.com/cheshirekow/cmake_format)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[codespell](https://github.com/codespell-project/codespell)  |null-ls-[codespell](https://github.com/codespell-project/codespell)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[crystal_format](https://github.com/crystal-lang/crystal)  |null-ls-[crystal_format](https://github.com/crystal-lang/crystal)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[csharpier](https://csharpier.com/)  |null-ls-[csharpier](https://csharpier.com/)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[cueimports](https://pkg.go.dev/github.com/asdine/cueimports)  |null-ls-[cueimports](https://pkg.go.dev/github.com/asdine/cueimports)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[cue_fmt](https://cuelang.org/) .... |null-ls-[cue_fmt](https://cuelang.org/)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[dart_format](https://dart.dev/tools/dart-format)  |null-ls-[dart_format](https://dart.dev/tools/dart-format)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[deno_fmt](https://deno.land/manual/tools/formatter)  |null-ls-[deno_fmt](https://deno.land/manual/tools/formatter)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
Notes ........................................................ |null-ls-notes|
[dfmt](https://github.com/dlang-community/dfmt)  |null-ls-[dfmt](https://github.com/dlang-community/dfmt)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[djhtml](https://github.com/rtts/djhtml)  |null-ls-[djhtml](https://github.com/rtts/djhtml)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[djlint](https://github.com/Riverside-Healthcare/djLint)  |null-ls-[djlint](https://github.com/riverside-healthcare/djlint)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[docformatter](https://github.com/PyCQA/docformatter)  |null-ls-[docformatter](https://github.com/pycqa/docformatter)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[dprint](https://dprint.dev/) ........ |null-ls-[dprint](https://dprint.dev/)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
Notes ........................................................ |null-ls-notes|
[dtsfmt](https://github.com/dts-lang/rustfmt)  |null-ls-[dtsfmt](https://github.com/dts-lang/rustfmt)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
Notes ........................................................ |null-ls-notes|
[elm_format](https://github.com/avh4/elm-format)  |null-ls-[elm_format](https://github.com/avh4/elm-format)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[emacs_scheme_mode](https://www.gnu.org/savannah-checkouts/gnu/emacs/emacs.html)  |null-ls-[emacs_scheme_mode](https://www.gnu.org/savannah-checkouts/gnu/emacs/emacs.html)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
Notes ........................................................ |null-ls-notes|
[emacs_vhdl_mode](https://guest.iis.ee.ethz.ch/~zimmi/emacs/vhdl-mode.html)  |null-ls-[emacs_vhdl_mode](https://guest.iis.ee.ethz.ch/~zimmi/emacs/vhdl-mode.html)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
Notes ........................................................ |null-ls-notes|
[erb_format](https://github.com/nebulab/erb-formatter)  |null-ls-[erb_format](https://github.com/nebulab/erb-formatter)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[erb_lint](https://github.com/Shopify/erb-lint)  |null-ls-[erb_lint](https://github.com/shopify/erb-lint)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[erlfmt](https://github.com/WhatsApp/erlfmt)  |null-ls-[erlfmt](https://github.com/whatsapp/erlfmt)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[eslint](https://github.com/eslint/eslint)  |null-ls-[eslint](https://github.com/eslint/eslint)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
Notes ........................................................ |null-ls-notes|
[eslint_d](https://github.com/mantoni/eslint_d.js/)  |null-ls-[eslint_d](https://github.com/mantoni/eslint_d.js/)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
Notes ........................................................ |null-ls-notes|
[fantomas](https://github.com/fsprojects/fantomas)  |null-ls-[fantomas](https://github.com/fsprojects/fantomas)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[fish_indent](https://fishshell.com/docs/current/cmds/fish_indent.html)  |null-ls-[fish_indent](https://fishshell.com/docs/current/cmds/fish_indent.html)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[fixjson](https://github.com/rhysd/fixjson)  |null-ls-[fixjson](https://github.com/rhysd/fixjson)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[fnlfmt](https://git.sr.ht/~technomancy/fnlfmt)  |null-ls-[fnlfmt](https://git.sr.ht/~technomancy/fnlfmt)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[forge_fmt](https://book.getfoundry.sh/reference/config/formatter)  |null-ls-[forge_fmt](https://book.getfoundry.sh/reference/config/formatter)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[format_r](https://github.com/yihui/formatR)  |null-ls-[format_r](https://github.com/yihui/formatr)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[fourmolu](https://hackage.haskell.org/package/fourmolu)  |null-ls-[fourmolu](https://hackage.haskell.org/package/fourmolu)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[fprettify](https://github.com/pseewald/fprettify)  |null-ls-[fprettify](https://github.com/pseewald/fprettify)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[gdformat](https://github.com/Scony/godot-gdscript-toolkit)  |null-ls-[gdformat](https://github.com/scony/godot-gdscript-toolkit)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[gersemi](https://github.com/BlankSpruce/gersemi)  |null-ls-[gersemi](https://github.com/blankspruce/gersemi)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[gn_format](http://gn.googlesource.com/gn)  |null-ls-[gn_format](http://gn.googlesource.com/gn)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
Notes ........................................................ |null-ls-notes|
[gofmt](https://pkg.go.dev/cmd/gofmt)  |null-ls-[gofmt](https://pkg.go.dev/cmd/gofmt)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
Notes ........................................................ |null-ls-notes|
[gofumpt](https://github.com/mvdan/gofumpt)  |null-ls-[gofumpt](https://github.com/mvdan/gofumpt)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[goimports](https://pkg.go.dev/golang.org/x/tools/cmd/goimports)  |null-ls-[goimports](https://pkg.go.dev/golang.org/x/tools/cmd/goimports)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[goimports_reviser](https://pkg.go.dev/github.com/incu6us/goimports-reviser)  |null-ls-[goimports_reviser](https://pkg.go.dev/github.com/incu6us/goimports-reviser)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[golines](https://pkg.go.dev/github.com/segmentio/golines)  |null-ls-[golines](https://pkg.go.dev/github.com/segmentio/golines)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[google_java_format](https://github.com/google/google-java-format)  |null-ls-[google_java_format](https://github.com/google/google-java-format)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[haxe_formatter](https://github.com/HaxeCheckstyle/haxe-formatter)  |null-ls-[haxe_formatter](https://github.com/haxecheckstyle/haxe-formatter)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[hclfmt](https://github.com/fatih/hclfmt)  |null-ls-[hclfmt](https://github.com/fatih/hclfmt)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[htmlbeautifier](https://github.com/threedaymonk/htmlbeautifier)  |null-ls-[htmlbeautifier](https://github.com/threedaymonk/htmlbeautifier)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[isort](https://github.com/PyCQA/isort)  |null-ls-[isort](https://github.com/pycqa/isort)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[isortd](https://github.com/urm8/isortd)  |null-ls-[isortd](https://github.com/urm8/isortd)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
Config ...................................................... |null-ls-config|
[joker](https://github.com/candid82/joker)  |null-ls-[joker](https://github.com/candid82/joker)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[jq](https://github.com/stedolan/jq)  |null-ls-[jq](https://github.com/stedolan/jq)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[jsonnetfmt](https://github.com/google/jsonnet)  |null-ls-[jsonnetfmt](https://github.com/google/jsonnet)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[json_tool](https://docs.python.org/3/library/json.html#module-json.tool)  |null-ls-[json_tool](https://docs.python.org/3/library/json.html#module-json.tool)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[just](https://just.systems/) ........ |null-ls-[just](https://just.systems/)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[ktlint](https://ktlint.github.io/)  |null-ls-[ktlint](https://ktlint.github.io/)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[latexindent](https://github.com/cmhughes/latexindent.pl)  |null-ls-[latexindent](https://github.com/cmhughes/latexindent.pl)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[leptosfmt](https://github.com/bram209/leptosfmt)  |null-ls-[leptosfmt](https://github.com/bram209/leptosfmt)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[lua_format](https://github.com/Koihik/LuaFormatter)  |null-ls-[lua_format](https://github.com/koihik/luaformatter)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[markdownlint](https://github.com/igorshubovych/markdownlint-cli)  |null-ls-[markdownlint](https://github.com/igorshubovych/markdownlint-cli)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
Notes ........................................................ |null-ls-notes|
[markdown_toc](https://github.com/jonschlinkert/markdown-toc)  |null-ls-[markdown_toc](https://github.com/jonschlinkert/markdown-toc)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
Notes ........................................................ |null-ls-notes|
[mdformat](https://github.com/executablebooks/mdformat)  |null-ls-[mdformat](https://github.com/executablebooks/mdformat)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
Notes ........................................................ |null-ls-notes|
[mix](https://hexdocs.pm/mix/1.12/Mix.html)  |null-ls-[mix](https://hexdocs.pm/mix/1.12/mix.html)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[nginx_beautifier](https://github.com/vasilevich/nginxbeautifier)  |null-ls-[nginx_beautifier](https://github.com/vasilevich/nginxbeautifier)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[nimpretty](https://nim-lang.org/docs/tools.html)  |null-ls-[nimpretty](https://nim-lang.org/docs/tools.html)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[nixfmt](https://github.com/serokell/nixfmt)  |null-ls-[nixfmt](https://github.com/serokell/nixfmt)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[nixpkgs_fmt](https://github.com/nix-community/nixpkgs-fmt)  |null-ls-[nixpkgs_fmt](https://github.com/nix-community/nixpkgs-fmt)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[npm_groovy_lint](https://github.com/nvuillam/npm-groovy-lint)  |null-ls-[npm_groovy_lint](https://github.com/nvuillam/npm-groovy-lint)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[ocamlformat](https://github.com/ocaml-ppx/ocamlformat)  |null-ls-[ocamlformat](https://github.com/ocaml-ppx/ocamlformat)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[ocdc](https://github.com/mdwint/ocdc)  |null-ls-[ocdc](https://github.com/mdwint/ocdc)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[packer](https://www.packer.io/docs/commands/fmt)  |null-ls-[packer](https://www.packer.io/docs/commands/fmt)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[perlimports](https://metacpan.org/dist/App-perlimports/view/script/perlimports)  |null-ls-[perlimports](https://metacpan.org/dist/app-perlimports/view/script/perlimports)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[perltidy](http://perltidy.sourceforge.net/)  |null-ls-[perltidy](http://perltidy.sourceforge.net/)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[pg_format](https://github.com/darold/pgFormatter)  |null-ls-[pg_format](https://github.com/darold/pgformatter)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[phpcbf](https://github.com/squizlabs/PHP_CodeSniffer)  |null-ls-[phpcbf](https://github.com/squizlabs/php_codesniffer)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[phpcsfixer](https://github.com/PHP-CS-Fixer/PHP-CS-Fixer)  |null-ls-[phpcsfixer](https://github.com/php-cs-fixer/php-cs-fixer)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[pint](https://github.com/laravel/pint)  |null-ls-[pint](https://github.com/laravel/pint)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[prettier](https://github.com/prettier/prettier)  |null-ls-[prettier](https://github.com/prettier/prettier)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
Notes ........................................................ |null-ls-notes|
[prettierd](https://github.com/fsouza/prettierd)  |null-ls-[prettierd](https://github.com/fsouza/prettierd)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[prettier_d_slim](https://github.com/mikew/prettier_d_slim)  |null-ls-[prettier_d_slim](https://github.com/mikew/prettier_d_slim)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
Notes ........................................................ |null-ls-notes|
[prettier_eslint](https://github.com/prettier/prettier-eslint-cli)  |null-ls-[prettier_eslint](https://github.com/prettier/prettier-eslint-cli)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
Notes ........................................................ |null-ls-notes|
[prettier_standard](https://github.com/sheerun/prettier-standard)  |null-ls-[prettier_standard](https://github.com/sheerun/prettier-standard)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[prismaFmt](https://github.com/prisma/prisma-engines)  |null-ls-[prismafmt](https://github.com/prisma/prisma-engines)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[protolint](https://github.com/yoheimuta/protolint)  |null-ls-[protolint](https://github.com/yoheimuta/protolint)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[ptop](https://www.freepascal.org/tools/ptop.html)  |null-ls-[ptop](https://www.freepascal.org/tools/ptop.html)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[puppet_lint](http://puppet-lint.com/)  |null-ls-[puppet_lint](http://puppet-lint.com/)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[purs_tidy](https://github.com/natefaubion/purescript-tidy)  |null-ls-[purs_tidy](https://github.com/natefaubion/purescript-tidy)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
Notes ........................................................ |null-ls-notes|
[pyflyby](https://github.com/deshaw/pyflyby)  |null-ls-[pyflyby](https://github.com/deshaw/pyflyby)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[pyink](https://github.com/google/pyink)  |null-ls-[pyink](https://github.com/google/pyink)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[qmlformat](https://doc-snapshots.qt.io/qt6-dev/qtquick-tools-and-utilities.html#qmlformat)  |null-ls-[qmlformat](https://doc-snapshots.qt.io/qt6-dev/qtquick-tools-and-utilities.html#qmlformat)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[racket_fixw](https://github.com/6cdh/racket-fixw)  |null-ls-[racket_fixw](https://github.com/6cdh/racket-fixw)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
Notes ........................................................ |null-ls-notes|
[raco_fmt](https://docs.racket-lang.org/fmt/)  |null-ls-[raco_fmt](https://docs.racket-lang.org/fmt/)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
Notes ........................................................ |null-ls-notes|
[rego](https://www.openpolicyagent.org/docs/latest/policy-language)  |null-ls-[rego](https://www.openpolicyagent.org/docs/latest/policy-language)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[remark](https://github.com/remarkjs/remark)  |null-ls-[remark](https://github.com/remarkjs/remark)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
Notes ........................................................ |null-ls-notes|
[reorder_python_imports](https://github.com/asottile/reorder_python_imports)  |null-ls-[reorder_python_imports](https://github.com/asottile/reorder_python_imports)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[rescript](https://rescript-lang.org/)  |null-ls-[rescript](https://rescript-lang.org/)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[rome](https://rome.tools) .............. |null-ls-[rome](https://rome.tools)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
Notes ........................................................ |null-ls-notes|
[rubocop](https://github.com/rubocop/rubocop)  |null-ls-[rubocop](https://github.com/rubocop/rubocop)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[rubyfmt](https://github.com/fables-tales/rubyfmt)  |null-ls-[rubyfmt](https://github.com/fables-tales/rubyfmt)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
Notes ........................................................ |null-ls-notes|
[ruff](https://github.com/charliermarsh/ruff/)  |null-ls-[ruff](https://github.com/charliermarsh/ruff/)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[rufo](https://github.com/ruby-formatter/rufo)  |null-ls-[rufo](https://github.com/ruby-formatter/rufo)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[rustfmt](https://github.com/rust-lang/rustfmt)  |null-ls-[rustfmt](https://github.com/rust-lang/rustfmt)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
Notes ........................................................ |null-ls-notes|
[rustywind](https://github.com/avencera/rustywind)  |null-ls-[rustywind](https://github.com/avencera/rustywind)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[scalafmt](https://github.com/scalameta/scalafmt)  |null-ls-[scalafmt](https://github.com/scalameta/scalafmt)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[semistandardjs](https://standardjs.com/)  |null-ls-[semistandardjs](https://standardjs.com/)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[shellharden](https://github.com/anordal/shellharden)  |null-ls-[shellharden](https://github.com/anordal/shellharden)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[shfmt](https://github.com/mvdan/sh)  |null-ls-[shfmt](https://github.com/mvdan/sh)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[smlfmt](https://github.com/shwestrick/smlfmt)  |null-ls-[smlfmt](https://github.com/shwestrick/smlfmt)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[sqlfluff](https://github.com/sqlfluff/sqlfluff)  |null-ls-[sqlfluff](https://github.com/sqlfluff/sqlfluff)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
Notes ........................................................ |null-ls-notes|
[sqlfmt](https://sqlfmt.com/) ........ |null-ls-[sqlfmt](https://sqlfmt.com/)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
Notes ........................................................ |null-ls-notes|
[sqlformat](https://manpages.ubuntu.com/manpages/xenial/man1/sqlformat.1.html)  |null-ls-[sqlformat](https://manpages.ubuntu.com/manpages/xenial/man1/sqlformat.1.html)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[sql_formatter](https://github.com/sql-formatter-org/sql-formatter)  |null-ls-[sql_formatter](https://github.com/sql-formatter-org/sql-formatter)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[standardjs](https://standardjs.com/)  |null-ls-[standardjs](https://standardjs.com/)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[standardrb](https://github.com/testdouble/standard)  |null-ls-[standardrb](https://github.com/testdouble/standard)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[standardts](https://standardjs.com/#typescript)  |null-ls-[standardts](https://standardjs.com/#typescript)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[stylelint](https://github.com/stylelint/stylelint)  |null-ls-[stylelint](https://github.com/stylelint/stylelint)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[styler](https://github.com/r-lib/styler)  |null-ls-[styler](https://github.com/r-lib/styler)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[stylish_haskell](https://github.com/haskell/stylish-haskell)  |null-ls-[stylish_haskell](https://github.com/haskell/stylish-haskell)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[stylua](https://github.com/JohnnyMorganz/StyLua)  |null-ls-[stylua](https://github.com/johnnymorganz/stylua)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[surface](https://hexdocs.pm/surface_formatter/readme.html)  |null-ls-[surface](https://hexdocs.pm/surface_formatter/readme.html)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[swiftformat](https://github.com/nicklockwood/SwiftFormat)  |null-ls-[swiftformat](https://github.com/nicklockwood/swiftformat)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[swiftlint](https://github.com/realm/SwiftLint)  |null-ls-[swiftlint](https://github.com/realm/swiftlint)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[swift_format](https://github.com/apple/swift-format)  |null-ls-[swift_format](https://github.com/apple/swift-format)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[taplo](https://taplo.tamasfe.dev/)  |null-ls-[taplo](https://taplo.tamasfe.dev/)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[terrafmt](https://github.com/katbyte/terrafmt)  |null-ls-[terrafmt](https://github.com/katbyte/terrafmt)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[terraform_fmt](https://www.terraform.io/docs/cli/commands/fmt.html)  |null-ls-[terraform_fmt](https://www.terraform.io/docs/cli/commands/fmt.html)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[textlint](https://github.com/textlint/textlint)  |null-ls-[textlint](https://github.com/textlint/textlint)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[tidy](https://www.html-tidy.org/)  |null-ls-[tidy](https://www.html-tidy.org/)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[topiary](https://github.com/tweag/topiary)  |null-ls-[topiary](https://github.com/tweag/topiary)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[treefmt](https://github.com/numtide/treefmt)  |null-ls-[treefmt](https://github.com/numtide/treefmt)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
trim_newlines ........................................ |null-ls-trim_newlines|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
trim_whitespace .................................... |null-ls-trim_whitespace|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[uncrustify](https://github.com/uncrustify/uncrustify)  |null-ls-[uncrustify](https://github.com/uncrustify/uncrustify)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[usort](https://github.com/facebookexperimental/usort)  |null-ls-[usort](https://github.com/facebookexperimental/usort)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[verible_verilog_format](https://github.com/chipsalliance/verible)  |null-ls-[verible_verilog_format](https://github.com/chipsalliance/verible)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[xmlformat](https://github.com/pamoller/xmlformatter)  |null-ls-[xmlformat](https://github.com/pamoller/xmlformatter)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[xmllint](http://xmlsoft.org/xmllint.html)  |null-ls-[xmllint](http://xmlsoft.org/xmllint.html)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[xq](https://github.com/sibprogrammer/xq)  |null-ls-[xq](https://github.com/sibprogrammer/xq)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[yamlfix](https://github.com/lyz-code/yamlfix)  |null-ls-[yamlfix](https://github.com/lyz-code/yamlfix)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[yamlfmt](https://github.com/google/yamlfmt)  |null-ls-[yamlfmt](https://github.com/google/yamlfmt)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[yapf](https://github.com/google/yapf)  |null-ls-[yapf](https://github.com/google/yapf)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[yq](https://github.com/mikefarah/yq)  |null-ls-[yq](https://github.com/mikefarah/yq)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[zigfmt](https://github.com/ziglang/zig)  |null-ls-[zigfmt](https://github.com/ziglang/zig)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
[zprint](https://github.com/kkinnear/zprint)  |null-ls-[zprint](https://github.com/kkinnear/zprint)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
Notes ........................................................ |null-ls-notes|
Hover ........................................................ |null-ls-hover|
[dictionary](https://dictionaryapi.dev/)  |null-ls-[dictionary](https://dictionaryapi.dev/)|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
Notes ........................................................ |null-ls-notes|
printenv .................................................. |null-ls-printenv|
Usage ........................................................ |null-ls-usage|
Defaults .................................................. |null-ls-defaults|
Notes ........................................................ |null-ls-notes|

==============================================================================
BUILT-IN SOURCES                                    *null-ls-built-in-sources*


This is an automatically generated list of all null-ls built-in sources.

See BUILTIN_CONFIG <BUILTIN_CONFIG.md> to learn how to set up and configure
these sources.

- Code Actions <#code-actions>
- Completion <#completion>
- Diagnostics <#diagnostics>
- Formatting <#formatting>
- Hover <#hover>

------------------------------------------------------------------------------
CODE ACTIONS                                            *null-ls-code-actions*



                                                                              
[CSPELL](HTTPS://GITHUB.COM/STREETSIDESOFTWARE/CSPELL)*null-ls-[cspell](https://github.com/streetsidesoftware/cspell)*

Injects actions to fix typos found by `cspell`.

**This source is not actively developed in this repository.**

An up-to-date version exists as a companion plugin in cspell.nvim
<https://github.com/davidmh/cspell.nvim>


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.cspell, null_ls.builtins.code_actions.cspell }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{}`
- Method: `code_action`

                                                                              
CONFIG                                                        *null-ls-config*


==============================================================================
`FIND_JSON` (FUNCTION)                         *null-ls-find_json`-(function)*


Customizing the location of cspell config

>lua
    local cspell = null_ls.builtins.code_actions.cspell.with({
        config = {
            find_json = function(cwd)
                return vim.fn.expand(cwd .. "/cspell.json")
            end
        },
    })
<

==============================================================================
`ON_SUCCESS` (FUNCTION)                       *null-ls-on_success`-(function)*


Callback after successful execution of code action.

>lua
    local cspell = null_ls.builtins.code_actions.cspell.with({
        config = {
            on_success = function(cspell_config_file, params)
                -- format the cspell config file
                os.execute(
                    string.format(
                        "cat %s | jq -S '.words |= sort' | tee %s > /dev/null",
                        cspell_config_file,
                        cspell_config_file
                    )
                )
            end
        },
    })
<

                                                                              
NOTES                                                          *null-ls-notes*

- This source depends on the `cspell` built-in diagnostics source, so make
  sure to register it, too.

                                                                              
[ESLINT](HTTPS://GITHUB.COM/ESLINT/ESLINT)*null-ls-[eslint](https://github.com/eslint/eslint)*

Injects actions to fix ESLint issues or ignore broken rules.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.code_actions.eslint }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "javascript", "javascriptreact", "typescript",
  "typescriptreact", "vue" }`
- Method: `code_action`
- Command: `eslint`
- Args: `{ "-f", "json", "--stdin", "--stdin-filename", "$FILENAME" }`

                                                                              
[ESLINT_D](HTTPS://GITHUB.COM/MANTONI/ESLINT_D.JS)*null-ls-[eslint_d](https://github.com/mantoni/eslint_d.js)*

Injects actions to fix ESLint issues or ignore broken rules. Like ESLint, but
faster.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.code_actions.eslint_d }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "javascript", "javascriptreact", "typescript",
  "typescriptreact", "vue" }`
- Method: `code_action`
- Command: `eslint_d`
- Args: `{ "-f", "json", "--stdin", "--stdin-filename", "$FILENAME" }`

                                                                              
NOTES                                                          *null-ls-notes*

- Once spawned, the server will continue to run in the background. This is
  normal and not related to null-ls. You can stop it by running `eslint_d
  stop` from the command line.

                                                                              
GITREBASE                                                  *null-ls-gitrebase*

Injects actions to change `gitrebase` command (e.g. using `squash` instead of
`pick`).


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.code_actions.gitrebase }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "gitrebase" }`
- Method: `code_action`

                                                                              
[GITSIGNS](HTTPS://GITHUB.COM/LEWIS6991/GITSIGNS.NVIM)*null-ls-[gitsigns](https://github.com/lewis6991/gitsigns.nvim)*

Injects code actions for Git operations at the current cursor position (stage
/ preview / reset hunks, blame, etc.).


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.code_actions.gitsigns }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{}`
- Method: `code_action`

                                                                              
CONFIG                                                        *null-ls-config*


==============================================================================
`FILTER_ACTIONS` (FUNCTION)               *null-ls-filter_actions`-(function)*


Callback to filter out unwanted actions.

>lua
    local gitsigns = null_ls.builtins.code_actions.gitsigns.with({
        config = {
            filter_actions = function(title)
                return title:lower():match("blame") == nil -- filter out blame actions
            end,
        },
    })
<

                                                                              
[GOMODIFYTAGS](HTTPS://GITHUB.COM/FATIH/GOMODIFYTAGS)*null-ls-[gomodifytags](https://github.com/fatih/gomodifytags)*

Go tool to modify struct field tags


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.code_actions.gomodifytags }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "go" }`
- Method: `code_action`

                                                                              
NOTES                                                          *null-ls-notes*

- Requires installing the Go tree-sitter parser.

                                                                              
[IMPL](HTTPS://GITHUB.COM/JOSHARIAN/IMPL)*null-ls-[impl](https://github.com/josharian/impl)*

impl generates method stubs for implementing an interface.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.code_actions.impl }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "go" }`
- Method: `code_action`

                                                                              
NOTES                                                          *null-ls-notes*

- Requires installing the Go tree-sitter parser.

                                                                              
[LTRS](HTTPS://GITHUB.COM/JEERTMANS/LANGUAGETOOL-RUST)*null-ls-[ltrs](https://github.com/jeertmans/languagetool-rust)*

LanguageTool-Rust (LTRS) is both an executable and a Rust library that aims to
provide correct and safe bindings for the LanguageTool API.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.code_actions.ltrs }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "text", "markdown" }`
- Method: `code_action`
- Command: `ltrs`
- Args: `{ "check", "-m", "-r", "--text", "$TEXT" }`

                                                                              
[PROSELINT](HTTPS://GITHUB.COM/AMPERSER/PROSELINT)*null-ls-[proselint](https://github.com/amperser/proselint)*

An English prose linter. Can fix some issues via code actions.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.code_actions.proselint }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "markdown", "tex" }`
- Method: `code_action`
- Command: `proselint`
- Args: `{ "--json" }`

                                                                              
[REFACTORING](HTTPS://GITHUB.COM/THEPRIMEAGEN/REFACTORING.NVIM)*null-ls-[refactoring](https://github.com/theprimeagen/refactoring.nvim)*

The Refactoring library based off the Refactoring book by Martin Fowler.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.code_actions.refactoring }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "go", "javascript", "lua", "python", "typescript" }`
- Method: `code_action`

                                                                              
NOTES                                                          *null-ls-notes*

- Requires visually selecting the code you want to refactor and calling
  `:'<,'>lua vim.lsp.buf.range_code_action()` (for the default handler) or
  `:'<,'>Telescope lsp_range_code_actions` (for Telescope).

                                                                              
[SHELLCHECK](HTTPS://WWW.SHELLCHECK.NET/)*null-ls-[shellcheck](https://www.shellcheck.net/)*

Provides actions to disable ShellCheck errors/warnings, either for the current
line or for the entire file.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.code_actions.shellcheck }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "sh" }`
- Method: `code_action`
- Command: `shellcheck`
- Args: `{ "--format", "json1", "--source-path=$DIRNAME",
  "--external-sources", "-" }`

                                                                              
NOTES                                                          *null-ls-notes*

- Running the action to disable a rule for the current line adds a disable
  directive above the line or appends the rule to an existing disable
  directive for that line.
- Running the action to disable a rule for the current file adds a disable
  directive at the top of the file or appends the rule to an existing file
  disable directive.
- The first non-comment line in a script is not eligible for a line-level
  disable directive. See shellcheck#1877
  <https://github.com/koalaman/shellcheck/issues/1877>.

                                                                              
[STATIX](HTTPS://GITHUB.COM/NERDYPEPPER/STATIX)*null-ls-[statix](https://github.com/nerdypepper/statix)*

Lints and suggestions for the nix programming language.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.code_actions.statix }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "nix" }`
- Method: `code_action`
- Command: `statix`
- Args: `{ "check", "--stdin", "--format=json" }`

                                                                              
[TS_NODE_ACTION](HTTPS://GITHUB.COM/CKOLKEY/TS-NODE-ACTION)*null-ls-[ts_node_action](https://github.com/ckolkey/ts-node-action)*

A framework for running functions on Tree-sitter nodes, and updating the
buffer with the result.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.code_actions.ts_node_action }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{}`
- Method: `code_action`

                                                                              
[XO](HTTPS://GITHUB.COM/XOJS/XO)    *null-ls-[xo](https://github.com/xojs/xo)*

❤️ JavaScript/TypeScript linter (ESLint wrapper) with great defaults


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.code_actions.xo }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "javascript", "javascriptreact", "typescript",
  "typescriptreact" }`
- Method: `code_action`
- Command: `xo`
- Args: `{ "--reporter", "json", "--stdin", "--stdin-filename", "$FILENAME" }`

------------------------------------------------------------------------------
COMPLETION                                                *null-ls-completion*



                                                                              
[LUASNIP](HTTPS://GITHUB.COM/L3MON4D3/LUASNIP)*null-ls-[luasnip](https://github.com/l3mon4d3/luasnip)*

Snippet engine for Neovim, written in Lua.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.completion.luasnip }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{}`
- Method: `completion`

                                                                              
NOTES                                                          *null-ls-notes*

- Registering this source will show available snippets in the completion list,
  but luasnip is in charge of expanding them. Consult luasnip's documentation
  <https://github.com/L3MON4D3/LuaSnip#keymaps> to set up keymaps for
  expansion and jumping.

                                                                              
SPELL                                                          *null-ls-spell*

Spell suggestions completion source.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.completion.spell }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{}`
- Method: `completion`

                                                                              
TAGS                                                            *null-ls-tags*

Tags completion source.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.completion.tags }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{}`
- Method: `completion`

                                                                              
[VSNIP](HTTPS://GITHUB.COM/HRSH7TH/VIM-VSNIP)*null-ls-[vsnip](https://github.com/hrsh7th/vim-vsnip)*

Snippets managed by vim-vsnip.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.completion.vsnip }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{}`
- Method: `completion`

                                                                              
NOTES                                                          *null-ls-notes*

- Registering this source will show available snippets in the completion list,
  but vim-vsnip is in charge of expanding them. See vim-vsnip's documentation
  <https://github.com/hrsh7th/vim-vsnip#2-setting> for setup instructions.

------------------------------------------------------------------------------
DIAGNOSTICS                                              *null-ls-diagnostics*



                                                                              
[ACTIONLINT](HTTPS://GITHUB.COM/RHYSD/ACTIONLINT)*null-ls-[actionlint](https://github.com/rhysd/actionlint)*

Actionlint is a static checker for GitHub Actions workflow files.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.actionlint }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "yaml" }`
- Method: `diagnostics`
- Command: `actionlint`
- Args: dynamically resolved (see source
  <https://github.com/jose-elias-alvarez/null-ls.nvim/blob/main/lua/null-ls/builtins/diagnostics/actionlint.lua>)

                                                                              
[ALEX](HTTPS://GITHUB.COM/GET-ALEX/ALEX)*null-ls-[alex](https://github.com/get-alex/alex)*

Catch insensitive, inconsiderate writing.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.alex }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "markdown" }`
- Method: `diagnostics`
- Command: `alex`
- Args: `{ "--stdin", "--quiet" }`

                                                                              
[ANSIBLELINT](HTTPS://GITHUB.COM/ANSIBLE-COMMUNITY/ANSIBLE-LINT)*null-ls-[ansiblelint](https://github.com/ansible-community/ansible-lint)*

Linter for Ansible playbooks, roles and collections.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.ansiblelint }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "yaml.ansible" }`
- Method: `diagnostics`
- Command: `ansible-lint`
- Args: `{ "-f", "codeclimate", "-q", "--nocolor", "$FILENAME" }`

                                                                              
[BSLINT](HTTPS://GITHUB.COM/ROKUCOMMUNITY/BSLINT)*null-ls-[bslint](https://github.com/rokucommunity/bslint)*

A brighterscript CLI tool to lint your code without compiling your project.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.bslint }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "brs" }`
- Method: `diagnostics`
- Command: `bslint`
- Args: `{ "--files", "$FILENAME" }`

                                                                              
[BUF](HTTPS://GITHUB.COM/BUFBUILD/BUF)*null-ls-[buf](https://github.com/bufbuild/buf)*

A new way of working with Protocol Buffers.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.buf }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "proto" }`
- Method: `diagnostics_on_save`
- Command: `buf`
- Args: `{ "lint", "$FILENAME#include_package_files=true" }`

                                                                              
[BUILDIFIER](HTTPS://GITHUB.COM/BAZELBUILD/BUILDTOOLS/TREE/MASTER/BUILDIFIER)*null-ls-[buildifier](https://github.com/bazelbuild/buildtools/tree/master/buildifier)*

buildifier is a tool for formatting and linting bazel BUILD, WORKSPACE, and
.bzl files.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.buildifier }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "bzl" }`
- Method: `diagnostics`
- Command: `buildifier`
- Args: `{ "-mode=check", "-lint=warn", "-format=json", "-path=$FILENAME" }`

                                                                              
[CFN_LINT](HTTPS://GITHUB.COM/AWS-CLOUDFORMATION/CFN-LINT)*null-ls-[cfn_lint](https://github.com/aws-cloudformation/cfn-lint)*

Validate AWS CloudFormation yaml/json templates against the AWS CloudFormation
Resource Specification


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.cfn_lint }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "yaml", "json" }`
- Method: `diagnostics`
- Command: `cfn-lint`
- Args: `{ "--format", "parseable", "-" }`

                                                                              
NOTES                                                          *null-ls-notes*

- Once a supported file type is opened null-ls will try and determine if the
  file looks like an AWS Cloudformation template.
- A file will be considered an AWS Cloudformation template if it contains a
  "Resources" or "AWSTemplateFormatVersion" key.
- To prevent cfn-lint running on all YAML and JSON files that contain a
  "Resources" key.
- The file must contain at least one AWS Cloudformation Resource Type, e.g
  "Type": "AWS::S3::Bucket"
- This check will run only once when entering the buffer.
- This means if "Resources" or "AWSTemplateFormatVersion" is added to a file
  after this check is run, the cfn-lint diagnostics will not be generated.
- To fix this you must restart Neovim.

                                                                              
[CHECKMAKE](HTTPS://GITHUB.COM/MRTAZZ/CHECKMAKE)*null-ls-[checkmake](https://github.com/mrtazz/checkmake)*

`make` linter.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.checkmake }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "make" }`
- Method: `diagnostics`
- Command: `checkmake`
- Args: `{ "--format='{{.LineNumber}}:{{.Rule}}:{{.Violation}}\n'",
  "$FILENAME" }`

                                                                              
[CHECKSTYLE](HTTPS://CHECKSTYLE.ORG)*null-ls-[checkstyle](https://checkstyle.org)*

Checkstyle is a tool for checking Java source code for adherence to a Code
Standard or set of validation rules (best practices).


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = {
        null_ls.builtins.diagnostics.checkstyle.with({
            extra_args = { "-c", "/google_checks.xml" }, -- or "/sun_checks.xml" or path to self written rules
        }),
    }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "java" }`
- Method: `diagnostics_on_save`
- Command: `checkstyle`
- Args: `{ "-f", "sarif", "$ROOT" }`

                                                                              
NOTES                                                          *null-ls-notes*

- Checkstyle only offers a jar file as download. It is recommended to put an
  executable wrapper script in your path. Example wrapper script:
>bash
    #!/usr/bin/env bash
    java -jar path/to/checkstyle.jar "$@"
<
- Checkstyle needs a mandatory `-c` argument. Use `extra_args` to add yours.
  `extra_args` can also be a function to build more sophisticated logic.

                                                                              
[CHKTEX](HTTPS://WWW.NONGNU.ORG/CHKTEX/)*null-ls-[chktex](https://www.nongnu.org/chktex/)*

`latex` semantic linter.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.chktex }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "tex" }`
- Method: `diagnostics`
- Command: `chktex`
- Args: `{ "-q", "-f%l:%c:%d:%k:%n:%m\n" }`

                                                                              
[CLANG_CHECK](HTTPS://RELEASES.LLVM.ORG/14.0.0/TOOLS/CLANG/DOCS/CLANGTOOLS.HTML)*null-ls-[clang_check](https://releases.llvm.org/14.0.0/tools/clang/docs/clangtools.html)*

ClangCheck combines the LibTooling framework for running a Clang tool with the
basic Clang diagnostics by syntax checking specific files in a fast, command
line interface.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.clang_check }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "c", "cpp" }`
- Method: `diagnostics_on_save`
- Command: `clang-check`
- Args: `{ "--analyze", "--extra-arg=-Xclang",
  "--extra-arg=-analyzer-output=text", "--extra-arg=-fno-color-diagnostics",
  "-p", "build", "$FILENAME" }`

                                                                              
NOTES                                                          *null-ls-notes*

- `clang-check` will be run only when files are saved to disk, so that
  `compile_commands.json` files can be used. It is recommended to use this
  linter in combination with `compile_commands.json` files.

                                                                              
[CLAZY](HTTPS://GITHUB.COM/KDE/CLAZY)*null-ls-[clazy](https://github.com/kde/clazy)*

Qt-oriented static code analyzer based on the Clang framework


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.clazy }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "cpp" }`
- Method: `diagnostics_on_save`
- Command: `clazy-standalone`
- Args: `{ "--ignore-included-files", "--header-filter=$ROOT/.*", "$FILENAME"
  }`

                                                                              
NOTES                                                          *null-ls-notes*

- `clazy` needs a compilation database (`compile_commands.json`) to work. By
  default `clazy` will search for a compilation database in all parent folders
  of the input file.
- If the compilation database is not in a parent folder, the `-p` option can
  be used to point to the corresponding folder (e.g. the projects build
  directory):
>lua
    local sources = {
        null_ls.builtins.diagnostics.clazy.with({
            extra_args = { "-p=$ROOT/build" },
        }),
    }
<
- Alternatively, `compile_commands.json` can be linked into the project's root
  directory. For more information see
  https://clang.llvm.org/docs/HowToSetupToolingForLLVM.html
- `clazy` will be run only when files are saved to disk, so that
  `compile_commands.json` can be used.

                                                                              
[CLJ_KONDO](HTTPS://GITHUB.COM/CLJ-KONDO/CLJ-KONDO)*null-ls-[clj_kondo](https://github.com/clj-kondo/clj-kondo)*

A linter for clojure code that sparks joy


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.clj_kondo }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "clojure" }`
- Method: `diagnostics`
- Command: `clj-kondo`
- Args: `{ "--cache", "--lint", "-", "--filename", "$FILENAME" }`

                                                                              
[CMAKE_LINT](HTTPS://GITHUB.COM/CHESHIREKOW/CMAKE_FORMAT)*null-ls-[cmake_lint](https://github.com/cheshirekow/cmake_format)*

Check cmake listfiles for style violations, common mistakes, and
anti-patterns.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.cmake_lint }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "cmake" }`
- Method: `diagnostics_on_save`
- Command: `cmake-lint`
- Args: `{ "$FILENAME" }`

                                                                              
[CODESPELL](HTTPS://GITHUB.COM/CODESPELL-PROJECT/CODESPELL)*null-ls-[codespell](https://github.com/codespell-project/codespell)*

Codespell finds common misspellings in text files.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.codespell }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{}`
- Method: `diagnostics`
- Command: `codespell`
- Args: `{ "-" }`

                                                                              
[COMMITLINT](HTTPS://COMMITLINT.JS.ORG)*null-ls-[commitlint](https://commitlint.js.org)*

commitlint checks if your commit messages meet the conventional commit format.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.commitlint }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "gitcommit" }`
- Method: `diagnostics`
- Command: `commitlint`
- Args: `{ "--format", "commitlint-format-json" }`

                                                                              
NOTES                                                          *null-ls-notes*

- Needs npm packages commitlint and a json formatter:
  `@commitlint/{config-conventional,cli}` and `commitlint-format-json`.
- It works with the packages installed globally but watch out for some common
  issues <https://github.com/conventional-changelog/commitlint/issues/613>.

                                                                              
[CPPCHECK](HTTPS://GITHUB.COM/DANMAR/CPPCHECK)*null-ls-[cppcheck](https://github.com/danmar/cppcheck)*

A tool for fast static analysis of C/C++ code.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.cppcheck }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "cpp", "c" }`
- Method: `diagnostics`
- Command: `cppcheck`
- Args: `{ "--enable=warning,style,performance,portability", "--template=gcc",
  "$FILENAME" }`

                                                                              
[CPPLINT](HTTPS://GITHUB.COM/CPPLINT/CPPLINT)*null-ls-[cpplint](https://github.com/cpplint/cpplint)*

Cpplint is a command-line tool to check C/C++ files for style issues following
Google's C++ style guide


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.cpplint }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "cpp", "c" }`
- Method: `diagnostics`
- Command: `cpplint`
- Args: `{ "$FILENAME" }`

                                                                              
[CREDO](HTTPS://HEXDOCS.PM/CREDO)  *null-ls-[credo](https://hexdocs.pm/credo)*

Static analysis of `elixir` files for enforcing code consistency.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.credo }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "elixir" }`
- Method: `diagnostics`
- Command: `mix`
- Args: `{ "credo", "suggest", "--format", "json", "--read-from-stdin",
  "$FILENAME" }`

                                                                              
NOTES                                                          *null-ls-notes*

- Searches upwards from the buffer to the project root and tries to find the
  first `.credo.exs` file in case the project has nested `credo` configs.

                                                                              
[CSPELL](HTTPS://GITHUB.COM/STREETSIDESOFTWARE/CSPELL)*null-ls-[cspell](https://github.com/streetsidesoftware/cspell)*

cspell is a spell checker for code.

**This source is not actively developed in this repository.**

An up-to-date version exists as a companion plugin in cspell.nvim
<https://github.com/davidmh/cspell.nvim>


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.cspell }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{}`
- Method: `diagnostics`
- Command: `cspell`
- Args: dynamically resolved (see source
  <https://github.com/jose-elias-alvarez/null-ls.nvim/blob/main/lua/null-ls/builtins/diagnostics/cspell.lua>)

                                                                              
[CUE_FMT](HTTPS://GITHUB.COM/CUE-LANG/CUE)*null-ls-[cue_fmt](https://github.com/cue-lang/cue)*

Reports on formatting errors in .cue language files.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.cue_fmt }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "cue" }`
- Method: `diagnostics`
- Command: `cue`
- Args: `{ "vet", "$FILENAME" }`

                                                                              
[CURLYLINT](HTTPS://WWW.CURLYLINT.ORG/)*null-ls-[curlylint](https://www.curlylint.org/)*

Experimental HTML templates linting for Jinja, Nunjucks, Django templates,
Twig, and Liquid.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.curlylint }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "jinja.html", "htmldjango" }`
- Method: `diagnostics`
- Command: `curlylint`
- Args: `{ "--quiet", "-", "--format", "json", "--stdin-filepath", "$FILENAME"
  }`

                                                                              
[DEADNIX](HTTPS://GITHUB.COM/ASTRO/DEADNIX)*null-ls-[deadnix](https://github.com/astro/deadnix)*

Scan Nix files for dead code.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.deadnix }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "nix" }`
- Method: `diagnostics`
- Command: `deadnix`
- Args: `{ "--output-format=json", "$FILENAME" }`

                                                                              
[DENO_LINT](HTTPS://GITHUB.COM/DENOLAND/DENO_LINT)*null-ls-[deno_lint](https://github.com/denoland/deno_lint)*

Blazing fast linter for JavaScript and TypeScript written in Rust


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.deno_lint }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "javascript", "typescript", "typescriptreact",
  "javascriptreact" }`
- Method: `diagnostics`
- Command: `deno`
- Args: `{ "lint", "--json", "$FILENAME" }`

                                                                              
[DJLINT](HTTPS://GITHUB.COM/RIVERSIDE-HEALTHCARE/DJLINT)*null-ls-[djlint](https://github.com/riverside-healthcare/djlint)*

✨ 📜 🪄 ✨ HTML Template Linter and Formatter.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.djlint }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "django", "jinja.html", "htmldjango" }`
- Method: `diagnostics`
- Command: `djlint`
- Args: `{ "--quiet", "-" }`

                                                                              
[DOTENV_LINTER](HTTPS://GITHUB.COM/DOTENV-LINTER/DOTENV-LINTER)*null-ls-[dotenv_linter](https://github.com/dotenv-linter/dotenv-linter)*

Lightning-fast linter for .env files.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.dotenv_linter }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "sh" }`
- Method: `diagnostics`
- Command: `dotenv-linter`
- Args: `{ "$FILENAME" }`

                                                                              
[EDITORCONFIG_CHECKER](HTTPS://GITHUB.COM/EDITORCONFIG-CHECKER/EDITORCONFIG-CHECKER)*null-ls-[editorconfig_checker](https://github.com/editorconfig-checker/editorconfig-checker)*

A tool to verify that your files are in harmony with your `.editorconfig`.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.editorconfig_checker }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{}`
- Method: `diagnostics`
- Command: `editorconfig-checker`
- Args: `{ "-no-color", "$FILENAME" }`

                                                                              
[ERB_LINT](HTTPS://GITHUB.COM/SHOPIFY/ERB-LINT)*null-ls-[erb_lint](https://github.com/shopify/erb-lint)*

Lint your ERB or HTML files


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.erb_lint }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "eruby" }`
- Method: `diagnostics`
- Command: `erblint`
- Args: `{ "--format", "json", "--stdin", "$FILENAME" }`

                                                                              
[ESLINT](HTTPS://GITHUB.COM/ESLINT/ESLINT)*null-ls-[eslint](https://github.com/eslint/eslint)*

A linter for the JavaScript ecosystem.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.eslint }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "javascript", "javascriptreact", "typescript",
  "typescriptreact", "vue" }`
- Method: `diagnostics`
- Command: `eslint`
- Args: `{ "-f", "json", "--stdin", "--stdin-filename", "$FILENAME" }`

                                                                              
[ESLINT_D](HTTPS://GITHUB.COM/MANTONI/ESLINT_D.JS/)*null-ls-[eslint_d](https://github.com/mantoni/eslint_d.js/)*

Like ESLint, but faster.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.eslint_d }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "javascript", "javascriptreact", "typescript",
  "typescriptreact", "vue" }`
- Method: `diagnostics`
- Command: `eslint_d`
- Args: `{ "-f", "json", "--stdin", "--stdin-filename", "$FILENAME" }`

                                                                              
NOTES                                                          *null-ls-notes*

- Once spawned, the server will continue to run in the background. This is
  normal and not related to null-ls. You can stop it by running `eslint_d
  stop` from the command line.

                                                                              
[FISH](HTTPS://GITHUB.COM/FISH-SHELL/FISH-SHELL)*null-ls-[fish](https://github.com/fish-shell/fish-shell)*

Basic linting is available for fish scripts using `fish --no-execute`.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.fish }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "fish" }`
- Method: `diagnostics`
- Command: `fish`
- Args: `{ "--no-execute", "$FILENAME" }`

                                                                              
[FLAKE8](HTTPS://GITHUB.COM/PYCQA/FLAKE8)*null-ls-[flake8](https://github.com/pycqa/flake8)*

flake8 is a python tool that glues together pycodestyle, pyflakes, mccabe, and
third-party plugins to check the style and quality of Python code.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.flake8 }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "python" }`
- Method: `diagnostics`
- Command: `flake8`
- Args: `{ "--format", "default", "--stdin-display-name", "$FILENAME", "-" }`

                                                                              
[GCCDIAG](HTTPS://GITLAB.COM/ANDREJR/GCCDIAG)*null-ls-[gccdiag](https://gitlab.com/andrejr/gccdiag)*

gccdiag is a wrapper for any C/C++ compiler (gcc, avr-gcc, arm-none-eabi-gcc,
etc) that automatically uses the correct compiler arguments for a file in your
project by parsing the `compile_commands.json` file at the root of your
project.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.gccdiag }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "c", "cpp" }`
- Method: `diagnostics_on_save`
- Command: `gccdiag`
- Args: `{ "--default-args", "-S -x $FILEEXT", "-i", "-fdiagnostics-color",
  "--", "$FILENAME" }`

                                                                              
[GDLINT](HTTPS://GITHUB.COM/SCONY/GODOT-GDSCRIPT-TOOLKIT)*null-ls-[gdlint](https://github.com/scony/godot-gdscript-toolkit)*

A linter that performs a static analysis on gdscript code according to some
predefined configuration.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.gdlint }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "gdscript" }`
- Method: `diagnostics`
- Command: `gdlint`
- Args: `{ "$FILENAME" }`

                                                                              
[GITLINT](HTTPS://JORISROOVERS.COM/GITLINT/)*null-ls-[gitlint](https://jorisroovers.com/gitlint/)*

Linter for Git commit messages.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.gitlint }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "gitcommit" }`
- Method: `diagnostics`
- Command: `gitlint`
- Args: `{ "--msg-filename", "$FILENAME" }`

                                                                              
[GLSLC](HTTPS://GITHUB.COM/GOOGLE/SHADERC)*null-ls-[glslc](https://github.com/google/shaderc)*

Shader to SPIR-V compiler.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = {
        null_ls.builtins.diagnostics.glslc.with({
            extra_args = { "--target-env=opengl" }, -- use opengl instead of vulkan1.0
        }),
    }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "glsl" }`
- Method: `diagnostics`
- Command: `glslc`
- Args: `{ "-o", "-", "$FILENAME" }`

                                                                              
NOTES                                                          *null-ls-notes*

- The shader stage can be extracted from the file extension (`.vert`, `.geom`,
  `.frag`, etc.), but note that these file extensions are at the time of
  writing not natively recognized to be glsl files (only `.glsl` is). The
  shader stage can also be extracted from the file contents by adding a
  `#pragma shader_stage(<stage>)`. For more information see `man glslc`.
- the `--target-env` can be specified in `extra_args`. Defaults to vulkan1.0.
  Check `man glslc` for more possible targets environments.

                                                                              
[GOLANGCI_LINT](HTTPS://GOLANGCI-LINT.RUN/)*null-ls-[golangci_lint](https://golangci-lint.run/)*

A Go linter aggregator.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.golangci_lint }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "go" }`
- Method: `diagnostics_on_save`
- Command: `golangci-lint`
- Args: `{ "run", "--fix=false", "--out-format=json" }`

                                                                              
[GOSPEL](HTTPS://GITHUB.COM/KORTSCHAK/GOSPEL)*null-ls-[gospel](https://github.com/kortschak/gospel)*

misspelled word linter for Go comments, string literals and embedded files


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.gospel }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "go" }`
- Method: `diagnostics`
- Command: `gospel`
- Args: `{ "$DIRNAME" }`

                                                                              
[HADOLINT](HTTPS://GITHUB.COM/HADOLINT/HADOLINT)*null-ls-[hadolint](https://github.com/hadolint/hadolint)*

A smarter Dockerfile linter that helps you build best practice Docker images.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.hadolint }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "dockerfile" }`
- Method: `diagnostics`
- Command: `hadolint`
- Args: `{ "--no-fail", "--format=json", "-" }`

                                                                              
[HAML_LINT](HTTPS://GITHUB.COM/SDS/HAML-LINT)*null-ls-[haml_lint](https://github.com/sds/haml-lint)*

Tool for writing clean and consistent HAML.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.haml_lint }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "haml" }`
- Method: `diagnostics`
- Command: `haml-lint`
- Args: `{ "--reporter", "json", "$FILENAME" }`

                                                                              
[JSHINT](HTTPS://GITHUB.COM/JSHINT/JSHINT)*null-ls-[jshint](https://github.com/jshint/jshint)*

JSHint is a tool that helps to detect errors and potential problems in your
JavaScript code.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.jshint }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "javascript" }`
- Method: `diagnostics`
- Command: `jshint`
- Args: `{ "--reporter", "unix", "--extract", "auto", "--filename",
  "$FILENAME", "-" }`

                                                                              
[JSONLINT](HTTPS://GITHUB.COM/ZAACH/JSONLINT)*null-ls-[jsonlint](https://github.com/zaach/jsonlint)*

A pure JavaScript version of the service provided at jsonlint.com.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.jsonlint }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "json" }`
- Method: `diagnostics`
- Command: `jsonlint`
- Args: `{ "--compact" }`

                                                                              
[KTLINT](HTTPS://KTLINT.GITHUB.IO/)*null-ls-[ktlint](https://ktlint.github.io/)*

An anti-bikeshedding Kotlin linter with built-in formatter.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.ktlint }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "kotlin" }`
- Method: `diagnostics_on_save`
- Command: `ktlint`
- Args: `{ "--relative", "--reporter=json", "**/*.kt", "**/*.kts" }`

                                                                              
[LTRS](HTTPS://GITHUB.COM/JEERTMANS/LANGUAGETOOL-RUST)*null-ls-[ltrs](https://github.com/jeertmans/languagetool-rust)*

LanguageTool-Rust (LTRS) is both an executable and a Rust library that aims to
provide correct and safe bindings for the LanguageTool API.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.ltrs }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "text", "markdown", "markdown" }`
- Method: `diagnostics`
- Command: `ltrs`
- Args: `{ "check", "-m", "-r", "--text", "$TEXT" }`

                                                                              
[LUACHECK](HTTPS://GITHUB.COM/LUNARMODULES/LUACHECK)*null-ls-[luacheck](https://github.com/lunarmodules/luacheck)*

A tool for linting and static analysis of Lua code.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.luacheck }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "lua" }`
- Method: `diagnostics`
- Command: `luacheck`
- Args: `{ "--formatter", "plain", "--codes", "--ranges", "--filename",
  "$FILENAME", "-" }`

                                                                              
[MARKDOWNLINT](HTTPS://GITHUB.COM/DAVIDANSON/MARKDOWNLINT)*null-ls-[markdownlint](https://github.com/davidanson/markdownlint)*

Markdown style and syntax checker.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.markdownlint }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "markdown" }`
- Method: `diagnostics`
- Command: `markdownlint`
- Args: `{ "--stdin" }`

                                                                              
[MARKDOWNLINT_CLI2](HTTPS://GITHUB.COM/DAVIDANSON/MARKDOWNLINT-CLI2)*null-ls-[markdownlint_cli2](https://github.com/davidanson/markdownlint-cli2)*

A fast, flexible, configuration-based command-line interface for linting
Markdown/CommonMark files with the markdownlint library


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.markdownlint_cli2 }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "markdown" }`
- Method: `diagnostics_on_save`
- Command: `markdownlint-cli2`

                                                                              
NOTES                                                          *null-ls-notes*

- Must be configured using a configuration file
  <https://github.com/DavidAnson/markdownlint-cli2#configuration>.
- See the documentation
  <https://github.com/DavidAnson/markdownlint-cli2#overview> to understand the
  differences between markdownlint-cli2 and markdownlint-cli.

                                                                              
[MARKUPLINT](HTTPS://GITHUB.COM/MARKUPLINT/MARKUPLINT)*null-ls-[markuplint](https://github.com/markuplint/markuplint)*

A linter for all markup developers.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.markuplint }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "html" }`
- Method: `diagnostics`
- Command: `markuplint`
- Args: `{ "--format", "JSON", "$FILENAME" }`

                                                                              
[MDL](HTTPS://GITHUB.COM/MARKDOWNLINT/MARKDOWNLINT)*null-ls-[mdl](https://github.com/markdownlint/markdownlint)*

A tool to check Markdown files and flag style issues.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.mdl }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "markdown" }`
- Method: `diagnostics`
- Command: `mdl`
- Args: `{ "--json" }`

                                                                              
[MISSPELL](HTTPS://GITHUB.COM/CLIENT9/MISSPELL)*null-ls-[misspell](https://github.com/client9/misspell)*

Checks commonly misspelled English words in source files.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.misspell }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{}`
- Method: `diagnostics`
- Command: `misspell`

                                                                              
[MLINT](HTTPS://WWW.MATHWORKS.COM/HELP/MATLAB/REF/MLINT.HTML)*null-ls-[mlint](https://www.mathworks.com/help/matlab/ref/mlint.html)*

Linter for MATLAB files


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.mlint }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "matlab", "octave" }`
- Method: `diagnostics_on_save`
- Command: `mlint`
- Args: `{ "$FILENAME" }`

                                                                              
[MYPY](HTTPS://GITHUB.COM/PYTHON/MYPY)*null-ls-[mypy](https://github.com/python/mypy)*

Mypy is an optional static type checker for Python that aims to combine the
benefits of dynamic (or "duck") typing and static typing.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.mypy }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "python" }`
- Method: `diagnostics`
- Command: `mypy`
- Args: dynamically resolved (see source
  <https://github.com/jose-elias-alvarez/null-ls.nvim/blob/main/lua/null-ls/builtins/diagnostics/mypy.lua>)

                                                                              
[NPM_GROOVY_LINT](HTTPS://GITHUB.COM/NVUILLAM/NPM-GROOVY-LINT)*null-ls-[npm_groovy_lint](https://github.com/nvuillam/npm-groovy-lint)*

Lint, format and auto-fix Groovy, Jenkinsfile, and Gradle files.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.npm_groovy_lint }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "groovy", "java", "Jenkinsfile" }`
- Method: `diagnostics`
- Command: `npm-groovy-lint`
- Args: `{ "-o", "json", "-" }`

                                                                              
[OPACHECK](HTTPS://WWW.OPENPOLICYAGENT.ORG/DOCS/LATEST/CLI/#OPA-CHECK)*null-ls-[opacheck](https://www.openpolicyagent.org/docs/latest/cli/#opa-check)*

Check Rego source files for parse and compilation errors.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.opacheck }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "rego" }`
- Method: `diagnostics_on_save`
- Command: `opa`
- Args: `{ "check", "-f", "json", "--strict", "$ROOT", "--ignore=*.yaml",
  "--ignore=*.yml", "--ignore=*.json", "--ignore=.git/**/*" }`

                                                                              
[PERLIMPORTS](HTTPS://METACPAN.ORG/DIST/APP-PERLIMPORTS/VIEW/SCRIPT/PERLIMPORTS)*null-ls-[perlimports](https://metacpan.org/dist/app-perlimports/view/script/perlimports)*

A command line utility for cleaning up imports in your Perl code


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.perlimports }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "perl" }`
- Method: `diagnostics`
- Command: `perlimports`
- Args: `{ "--lint", "--read-stdin", "--filename", "$FILENAME" }`

                                                                              
[PHP](HTTPS://WWW.PHP.NET/)              *null-ls-[php](https://www.php.net/)*

Uses the php command-line tool's built in `-l` flag to check for syntax
errors.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.php }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "php" }`
- Method: `diagnostics`
- Command: `php`
- Args: `{ "-l", "-d", "display_errors=STDERR", "-d", " log_errors=Off" }`

                                                                              
[PHPCS](HTTPS://GITHUB.COM/SQUIZLABS/PHP_CODESNIFFER)*null-ls-[phpcs](https://github.com/squizlabs/php_codesniffer)*

PHP_CodeSniffer is a script that tokenizes PHP, JavaScript and CSS files to
detect violations of a defined coding standard.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.phpcs }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "php" }`
- Method: `diagnostics`
- Command: `phpcs`
- Args: `{ "--report=json", "-q", "-s", "--runtime-set",
  "ignore_warnings_on_exit", "1", "--runtime-set", "ignore_errors_on_exit",
  "1", "--stdin-path=$FILENAME", "--basepath=" }`

                                                                              
[PHPMD](HTTPS://GITHUB.COM/PHPMD/PHPMD/)*null-ls-[phpmd](https://github.com/phpmd/phpmd/)*

Runs PHP Mess Detector against PHP files.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.phpmd }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "php" }`
- Method: `diagnostics`
- Command: `phpmd`
- Args: `{ "$FILENAME", "json" }`

                                                                              
[PHPSTAN](HTTPS://GITHUB.COM/PHPSTAN/PHPSTAN)*null-ls-[phpstan](https://github.com/phpstan/phpstan)*

PHP static analysis tool.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.phpstan }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "php" }`
- Method: `diagnostics`
- Command: `phpstan`
- Args: `{ "analyze", "--error-format", "json", "--no-progress", "$FILENAME"
  }`

                                                                              
NOTES                                                          *null-ls-notes*

- Requires a valid `phpstan.neon` at root.
- If in place validation is required set `method` to `diagnostics_on_save` and
  `to_temp_file` to `false`

                                                                              
[PMD](HTTPS://PMD.GITHUB.IO)            *null-ls-[pmd](https://pmd.github.io)*

An extensible cross-language static code analyzer.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = {
        null_ls.builtins.diagnostics.pmd.with({
            extra_args = {
                "--rulesets",
                "category/java/bestpractices.xml,category/jsp/bestpractices.xml" -- or path to self-written ruleset
            },
        }),
    }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "java", "jsp" }`
- Method: `diagnostics_on_save`
- Command: `pmd`
- Args: `{ "--format", "json", "--dir", "$ROOT" }`

                                                                              
NOTES                                                          *null-ls-notes*

- PMD only offers parameterized wrapper scripts as download. It is recommended
  to put an executable wrapper script in your path. Example wrapper script:
>bash
    #!/usr/bin/env bash
    path/to/pmd/bin/run.sh pmd "$@"
<
- PMD needs a mandatory `--rulesets`/`-rulesets`/`-R` argument. Use
  `extra_args` to add yours. `extra_args` can also be a function to build more
  sophisticated logic.

                                                                              
[PROSELINT](HTTPS://GITHUB.COM/AMPERSER/PROSELINT)*null-ls-[proselint](https://github.com/amperser/proselint)*

An English prose linter.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.proselint }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "markdown", "tex" }`
- Method: `diagnostics`
- Command: `proselint`
- Args: `{ "--json" }`

                                                                              
[PROTOC_GEN_LINT](HTTPS://GITHUB.COM/CKAZNOCHA/PROTOC-GEN-LINT)*null-ls-[protoc_gen_lint](https://github.com/ckaznocha/protoc-gen-lint)*

A plug-in for Google's Protocol Buffers (protobufs) compiler to lint .proto
files for style violations.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.protoc_gen_lint }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "proto" }`
- Method: `diagnostics`
- Command: `protoc`
- Args: `{ "--lint_out", "$FILENAME", "-I", "/tmp", "$FILENAME" }`

                                                                              
[PROTOLINT](HTTPS://GITHUB.COM/YOHEIMUTA/PROTOLINT)*null-ls-[protolint](https://github.com/yoheimuta/protolint)*

A pluggable linter and fixer to enforce Protocol Buffer style and conventions.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.protolint }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "proto" }`
- Method: `diagnostics`
- Command: `protolint`
- Args: `{ "--reporter", "json", "$FILENAME" }`

                                                                              
[PSALM](HTTPS://PSALM.DEV/)              *null-ls-[psalm](https://psalm.dev/)*

A static analysis tool for finding errors in PHP applications.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.psalm }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "php" }`
- Method: `diagnostics`
- Command: `psalm`
- Args: `{ "--output-format=json", "--no-progress", "$FILENAME" }`

                                                                              
[PUGLINT](HTTPS://GITHUB.COM/PUGJS/PUG-LINT)*null-ls-[puglint](https://github.com/pugjs/pug-lint)*

An unopinionated and configurable linter and style checker for Pug.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.puglint }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "pug" }`
- Method: `diagnostics`
- Command: `pug-lint`
- Args: `{ "--reporter=inline", "$FILENAME" }`

                                                                              
[PUPPET_LINT](HTTP://PUPPET-LINT.COM/)*null-ls-[puppet_lint](http://puppet-lint.com/)*

Check that your Puppet manifest conforms to the style guide.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.puppet_lint }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "puppet", "epuppet" }`
- Method: `diagnostics`
- Command: `puppet-lint`
- Args: `{ "--json", "$FILENAME" }`

                                                                              
[PYCODESTYLE](HTTPS://GITHUB.COM/PYCQA/PYCODESTYLE)*null-ls-[pycodestyle](https://github.com/pycqa/pycodestyle)*

pycodestyle is a tool to check your Python code against some of the style
conventions in PEP 8.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.pycodestyle }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "python" }`
- Method: `diagnostics`
- Command: `pycodestyle`
- Args: `{ "$FILENAME" }`

                                                                              
[PYDOCSTYLE](HTTPS://WWW.PYDOCSTYLE.ORG/)*null-ls-[pydocstyle](https://www.pydocstyle.org/)*

pydocstyle is a static analysis tool for checking compliance with Python
docstring conventions.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.pydocstyle }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "python" }`
- Method: `diagnostics`
- Command: `pydocstyle`
- Args: `{ "$FILENAME" }`

                                                                              
NOTES                                                          *null-ls-notes*

- May fail to resolve config files. See the wiki
  <https://github.com/jose-elias-alvarez/null-ls.nvim/wiki/Source-specific-Configuration#pydocstyle>
  for workarounds.

                                                                              
[PYLAMA](HTTPS://GITHUB.COM/KLEN/PYLAMA)*null-ls-[pylama](https://github.com/klen/pylama)*

Code audit tool for Python.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.pylama }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "python" }`
- Method: `diagnostics`
- Command: `pylama`
- Args: `{ "--from-stdin", "$FILENAME", "-f", "json" }`

                                                                              
[PYLINT](HTTPS://GITHUB.COM/PYCQA/PYLINT)*null-ls-[pylint](https://github.com/pycqa/pylint)*

Pylint is a Python static code analysis tool which looks for programming
errors, helps enforcing a coding standard, sniffs for code smells and offers
simple refactoring suggestions.

If you prefer to use the older "message-id" names for these errors (i.e.
"W0612" instead of "unused-variable"), you can customize pylint's resulting
diagnostics like so:

>lua
    null_ls = require("null-ls")
    null_ls.setup({
      sources = {
        null_ls.builtins.diagnostics.pylint.with({
          diagnostics_postprocess = function(diagnostic)
            diagnostic.code = diagnostic.message_id
          end,
        }),
        null_ls.builtins.formatting.isort,
        null_ls.builtins.formatting.black,
        ...,
      },
    })
<

                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.pylint }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "python" }`
- Method: `diagnostics`
- Command: `pylint`
- Args: `{ "--from-stdin", "$FILENAME", "-f", "json" }`

                                                                              
[PYPROJECT_FLAKE8](HTTPS://GITHUB.COM/CSACHS/PYPROJECT-FLAKE8)*null-ls-[pyproject_flake8](https://github.com/csachs/pyproject-flake8)*

pyproject-flake8 is a flake8 wrapper to use with `pyproject.toml`
configuration.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.pyproject_flake8 }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "python" }`
- Method: `diagnostics`
- Command: `pflake8`
- Args: `{ "--format", "default", "--stdin-display-name", "$FILENAME", "-" }`

                                                                              
[QMLLINT](HTTPS://DOC-SNAPSHOTS.QT.IO/QT6-DEV/QTQUICK-TOOLS-AND-UTILITIES.HTML#QMLLINT)*null-ls-[qmllint](https://doc-snapshots.qt.io/qt6-dev/qtquick-tools-and-utilities.html#qmllint)*

qmllint is a tool shipped with Qt that verifies the syntatic validity of QML
files. It also warns about some QML anti-patterns.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.qmllint }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "qml" }`
- Method: `diagnostics`
- Command: `qmllint`
- Args: `{ "$FILENAME" }`

                                                                              
[REEK](HTTPS://GITHUB.COM/TROESSNER/REEK)*null-ls-[reek](https://github.com/troessner/reek)*

Code smell detector for Ruby


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.reek }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "ruby" }`
- Method: `diagnostics`
- Command: `reek`
- Args: `{ "--format", "json", "--stdin-filename", "$FILENAME" }`

                                                                              
[REVIVE](HTTPS://REVIVE.RUN/)          *null-ls-[revive](https://revive.run/)*

Fast, configurable, extensible, flexible, and beautiful linter for Go.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.revive }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "go" }`
- Method: `diagnostics_on_save`
- Command: `revive`
- Args: `{ "-formatter", "json", "./..." }`

                                                                              
NOTES                                                          *null-ls-notes*

- `extra_args` does not work with this linter, since it does not support
  additional non-file arguments after the first file or `./...` is specified.
  Overwrite `args` instead.

                                                                              
[RPMSPEC](HTTPS://RPM.ORG/)              *null-ls-[rpmspec](https://rpm.org/)*

Command line tool to parse RPM spec files.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.rpmspec }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "spec" }`
- Method: `diagnostics`
- Command: `rpmspec`
- Args: `{ "-P", "$FILENAME" }`

                                                                              
[RSTCHECK](HTTPS://GITHUB.COM/MYINT/RSTCHECK)*null-ls-[rstcheck](https://github.com/myint/rstcheck)*

Checks syntax of reStructuredText and code blocks nested within it.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.rstcheck }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "rst" }`
- Method: `diagnostics_on_save`
- Command: `rstcheck`
- Args: `{ "-r", "$DIRNAME" }`

                                                                              
[RUBOCOP](HTTPS://RUBOCOP.ORG/)      *null-ls-[rubocop](https://rubocop.org/)*

The Ruby Linter/Formatter that Serves and Protects.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.rubocop }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "ruby" }`
- Method: `diagnostics`
- Command: `rubocop`
- Args: `{ "-f", "json", "--force-exclusion", "--stdin", "$FILENAME" }`

                                                                              
[RUFF](HTTPS://GITHUB.COM/CHARLIERMARSH/RUFF/)*null-ls-[ruff](https://github.com/charliermarsh/ruff/)*

An extremely fast Python linter, written in Rust.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.ruff }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "python" }`
- Method: `diagnostics`
- Command: `ruff`
- Args: `{ "-n", "-e", "--stdin-filename", "$FILENAME", "-" }`

                                                                              
[SALTLINT](HTTPS://GITHUB.COM/WARPNET/SALT-LINT)*null-ls-[saltlint](https://github.com/warpnet/salt-lint)*

A command-line utility that checks for best practices in SaltStack.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.saltlint }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "sls" }`
- Method: `diagnostics_on_save`
- Command: `salt-lint`
- Args: `{ "--nocolor", "--json", "$FILENAME" }`

                                                                              
[SELENE](HTTPS://KAMPFKARREN.GITHUB.IO/SELENE/)*null-ls-[selene](https://kampfkarren.github.io/selene/)*

Command line tool designed to help write correct and idiomatic Lua code.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.selene }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "lua", "luau" }`
- Method: `diagnostics`
- Command: `selene`
- Args: `{ "--display-style", "quiet", "-" }`

                                                                              
[SEMGREP](HTTPS://SEMGREP.DEV/)      *null-ls-[semgrep](https://semgrep.dev/)*

Semgrep is a fast, open-source, static analysis tool for finding bugs and
enforcing code standards at editor, commit, and CI time.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.semgrep }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "typescript", "typescriptreact", "ruby", "python", "java",
  "go" }`
- Method: `diagnostics`
- Command: `semgrep`
- Args: `{ "-q", "--json", "$FILENAME" }`

                                                                              
[SEMISTANDARDJS](HTTPS://GITHUB.COM/STANDARD/SEMISTANDARD)*null-ls-[semistandardjs](https://github.com/standard/semistandard)*

JavaScript style guide, linter, and formatter.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.semistandardjs }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "javascript", "javascriptreact" }`
- Method: `diagnostics`
- Command: `semistandard`
- Args: `{ "--stdin" }`

                                                                              
[SHELLCHECK](HTTPS://WWW.SHELLCHECK.NET/)*null-ls-[shellcheck](https://www.shellcheck.net/)*

A shell script static analysis tool.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.shellcheck }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "sh" }`
- Method: `diagnostics`
- Command: `shellcheck`
- Args: `{ "--format", "json1", "--source-path=$DIRNAME",
  "--external-sources", "-" }`

                                                                              
[SOLHINT](HTTPS://PROTOFIRE.GITHUB.IO/SOLHINT/)*null-ls-[solhint](https://protofire.github.io/solhint/)*

An open source project for linting Solidity code. It provides both security
and style guide validations.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.solhint }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "solidity" }`
- Method: `diagnostics`
- Command: `solhint`
- Args: `{ "$FILENAME", "--formatter", "unix" }`

                                                                              
[SPECTRAL](HTTPS://GITHUB.COM/STOPLIGHTIO/SPECTRAL)*null-ls-[spectral](https://github.com/stoplightio/spectral)*

A flexible JSON/YAML linter for creating automated style guides, with baked in
support for OpenAPI v3.1, v3.0, and v2.0.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.spectral }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "yaml", "json" }`
- Method: `diagnostics`
- Command: `spectral`
- Args: `{ "lint", "--stdin-filepath", "$FILENAME", "-f", "json" }`

                                                                              
[SQLFLUFF](HTTPS://GITHUB.COM/SQLFLUFF/SQLFLUFF)*null-ls-[sqlfluff](https://github.com/sqlfluff/sqlfluff)*

A SQL linter and auto-formatter for Humans


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = {
        null_ls.builtins.diagnostics.sqlfluff.with({
            extra_args = { "--dialect", "postgres" }, -- change to your dialect
        }),
    }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "sql" }`
- Method: `diagnostics`
- Command: `sqlfluff`
- Args: `{ "lint", "--disable-progress-bar", "-f", "github-annotation", "-n",
  "$FILENAME" }`

                                                                              
NOTES                                                          *null-ls-notes*

- SQLFluff needs a mandatory `--dialect` argument. Use `extra_args` to add
  yours, or create a .sqlfluff file in the same directory as the SQL file to
  specify the dialect (see the sqlfluff docs for details). `extra_args` can
  also be a function to build more sophisticated logic.

                                                                              
[STANDARDJS](HTTPS://STANDARDJS.COM/)*null-ls-[standardjs](https://standardjs.com/)*

JavaScript style guide, linter, and formatter.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.standardjs }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "javascript", "javascriptreact" }`
- Method: `diagnostics`
- Command: `standard`
- Args: `{ "--stdin" }`

                                                                              
[STANDARDRB](HTTPS://GITHUB.COM/TESTDOUBLE/STANDARD)*null-ls-[standardrb](https://github.com/testdouble/standard)*

Ruby style guide, linter, and formatter.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.standardrb }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "ruby" }`
- Method: `diagnostics`
- Command: `standardrb`
- Args: `{ "--no-fix", "-f", "json", "--stdin", "$FILENAME" }`

                                                                              
[STATICCHECK](HTTPS://STATICCHECK.IO/)*null-ls-[staticcheck](https://staticcheck.io/)*

Advanced Go linter.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.staticcheck }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "go" }`
- Method: `diagnostics_on_save`
- Command: `staticcheck`
- Args: `{ "-f", "json", "./..." }`

                                                                              
NOTES                                                          *null-ls-notes*

- `extra_args` does not work with this linter, since it does not support
  additional non-file arguments after the first file or `./...` is specified.
  Overwrite `args` instead.

                                                                              
[STATIX](HTTPS://GITHUB.COM/NERDYPEPPER/STATIX)*null-ls-[statix](https://github.com/nerdypepper/statix)*

Lints and suggestions for the Nix programming language.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.statix }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "nix" }`
- Method: `diagnostics`
- Command: `statix`
- Args: `{ "check", "--stdin", "--format=errfmt" }`

                                                                              
[STYLELINT](HTTPS://GITHUB.COM/STYLELINT/STYLELINT)*null-ls-[stylelint](https://github.com/stylelint/stylelint)*

A mighty, modern linter that helps you avoid errors and enforce conventions in
your styles.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.stylelint }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "scss", "less", "css", "sass" }`
- Method: `diagnostics`
- Command: `stylelint`
- Args: `{ "--formatter", "json", "--stdin-filename", "$FILENAME" }`

                                                                              
[STYLINT](HTTPS://GITHUB.COM/SIMENB/STYLINT)*null-ls-[stylint](https://github.com/simenb/stylint)*

A linter for the Stylus CSS preprocessor.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.stylint }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "stylus" }`
- Method: `diagnostics`
- Command: `stylint`
- Args: `{ "$FILENAME" }`

                                                                              
[SWIFTLINT](HTTPS://GITHUB.COM/REALM/SWIFTLINT)*null-ls-[swiftlint](https://github.com/realm/swiftlint)*

A tool to enforce Swift style and conventions.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.swiftlint }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "swift" }`
- Method: `diagnostics`
- Command: `swiftlint`
- Args: `{ "--reporter", "json", "--use-stdin", "--quiet" }`

                                                                              
[TEAL](HTTPS://GITHUB.COM/TEAL-LANGUAGE/TL)*null-ls-[teal](https://github.com/teal-language/tl)*

The compiler for Teal, a typed dialect of Lua.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.teal }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "teal" }`
- Method: `diagnostics`
- Command: `tl`
- Args: `{ "check", "$FILENAME" }`

                                                                              
[TERRAFORM_VALIDATE](HTTPS://GITHUB.COM/HASHICORP/TERRAFORM)*null-ls-[terraform_validate](https://github.com/hashicorp/terraform)*

Terraform validate is is a subcommand of terraform to validate configuration
files in a directory


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.terraform_validate }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "terraform", "tf", "terraform-vars" }`
- Method: `diagnostics_on_save`
- Command: `terraform`
- Args: `{ "validate", "-json" }`

                                                                              
[TEXTIDOTE](HTTPS://GITHUB.COM/SYLVAINHALLE/TEXTIDOTE)*null-ls-[textidote](https://github.com/sylvainhalle/textidote)*

Spelling, grammar and style checking on LaTeX documents.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.textidote }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "markdown", "tex" }`
- Methods: `diagnostics_on_open, diagnostics_on_save`
- Command: `textidote`
- Args: `{ "--read-all", "--output", "singleline", "--no-color", "--check",
  "en", "--quiet", "$FILENAME" }`

                                                                              
[TEXTLINT](HTTPS://GITHUB.COM/TEXTLINT/TEXTLINT)*null-ls-[textlint](https://github.com/textlint/textlint)*

The pluggable linting tool for text and Markdown.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.textlint }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "txt", "markdown" }`
- Method: `diagnostics`
- Command: `textlint`
- Args: `{ "-f", "json", "--stdin", "--stdin-filename", "$FILENAME" }`

                                                                              
[TFSEC](HTTPS://GITHUB.COM/AQUASECURITY/TFSEC)*null-ls-[tfsec](https://github.com/aquasecurity/tfsec)*

Security scanner for Terraform code


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.tfsec }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "terraform", "tf", "terraform-vars" }`
- Method: `diagnostics_on_save`
- Command: `tfsec`
- Args: `{ "-s", "-f", "json", "$DIRNAME" }`

                                                                              
[TIDY](HTTPS://WWW.HTML-TIDY.ORG/)*null-ls-[tidy](https://www.html-tidy.org/)*

Tidy corrects and cleans up HTML and XML documents by fixing markup errors and
upgrading legacy code to modern standards.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.tidy }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "html", "xml" }`
- Method: `diagnostics`
- Command: `tidy`
- Args: dynamically resolved (see source
  <https://github.com/jose-elias-alvarez/null-ls.nvim/blob/main/lua/null-ls/builtins/diagnostics/tidy.lua>)

                                                                              
TODO_COMMENTS                                          *null-ls-todo_comments*

Uses inbuilt Lua code and treesitter to detect lines with TODO comments and
show a diagnostic warning on each line where it's present.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.todo_comments }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{}`
- Method: `diagnostics`

                                                                              
TRAIL_SPACE                                              *null-ls-trail_space*

Uses inbuilt Lua code to detect lines with trailing whitespace and show a
diagnostic warning on each line where it's present.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.trail_space }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{}`
- Method: `diagnostics`

                                                                              
[TSC](HTTPS://WWW.TYPESCRIPTLANG.ORG/DOCS/HANDBOOK/COMPILER-OPTIONS.HTML)*null-ls-[tsc](https://www.typescriptlang.org/docs/handbook/compiler-options.html)*

Parses diagnostics from the TypeScript compiler.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.tsc }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "typescript", "typescriptreact" }`
- Method: `diagnostics_on_save`
- Command: `tsc`
- Args: `{ "--pretty", "false", "--noEmit" }`

                                                                              
[TWIGCS](HTTPS://GITHUB.COM/FRIENDSOFTWIG/TWIGCS)*null-ls-[twigcs](https://github.com/friendsoftwig/twigcs)*

Runs Twigcs against Twig files.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.twigcs }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "twig" }`
- Method: `diagnostics`
- Command: `twigcs`
- Args: `{ "--reporter", "json", "$FILENAME" }`

                                                                              
[TYPOS](HTTPS://GITHUB.COM/CRATE-CI/TYPOS)*null-ls-[typos](https://github.com/crate-ci/typos)*

Source code spell checker written in rust


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.typos }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{}`
- Method: `diagnostics`
- Command: `typos`
- Args: `{ "--format", "json", "-" }`

                                                                              
[VACUUM](HTTPS://QUOBIX.COM/VACUUM)*null-ls-[vacuum](https://quobix.com/vacuum)*

The world’s fastest and most scalable OpenAPI linter.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.vacuum }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "yaml", "json" }`
- Method: `diagnostics`
- Command: `vacuum`
- Args: `{ "report", "--stdin", "--stdout" }`

                                                                              
[VALE](HTTPS://DOCS.ERRATA.AI/VALE/ABOUT)*null-ls-[vale](https://docs.errata.ai/vale/about)*

Syntax-aware linter for prose built with speed and extensibility in mind.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.vale }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "markdown", "tex", "asciidoc" }`
- Method: `diagnostics`
- Command: `vale`
- Args: dynamically resolved (see source
  <https://github.com/jose-elias-alvarez/null-ls.nvim/blob/main/lua/null-ls/builtins/diagnostics/vale.lua>)

                                                                              
NOTES                                                          *null-ls-notes*

- vale does not include a syntax by itself, so you probably need to grab a
  `vale.ini` (at `~/.vale.ini`) and a StylesPath (somewhere, pointed from
  `vale.ini`) from the list of configurations
  <https://docs.errata.ai/vale/about#open-source-configurations>.

                                                                              
[VERILATOR](HTTPS://WWW.VERIPOOL.ORG/VERILATOR/)*null-ls-[verilator](https://www.veripool.org/verilator/)*

Verilog and SystemVerilog linter power by Verilator


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.verilator }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "verilog", "systemverilog" }`
- Method: `diagnostics`
- Command: `verilator`
- Args: `{ "-lint-only", "-Wno-fatal", "$FILENAME" }`

                                                                              
[VINT](HTTPS://GITHUB.COM/VIMJAS/VINT)*null-ls-[vint](https://github.com/vimjas/vint)*

Linter for Vimscript.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.vint }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "vim" }`
- Method: `diagnostics`
- Command: `vint`
- Args: `{ "--style-problem", "--json", "$FILENAME" }`

                                                                              
[VULTURE](HTTPS://GITHUB.COM/JENDRIKSEIPP/VULTURE)*null-ls-[vulture](https://github.com/jendrikseipp/vulture)*

Vulture finds unused code in Python programs.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.vulture }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "python" }`
- Method: `diagnostics`
- Command: `vulture`
- Args: `{ "$FILENAME" }`

                                                                              
[WRITE_GOOD](HTTPS://GITHUB.COM/BTFORD/WRITE-GOOD)*null-ls-[write_good](https://github.com/btford/write-good)*

English prose linter.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.write_good }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "markdown" }`
- Method: `diagnostics`
- Command: `write-good`
- Args: `{ "--text=$TEXT", "--parse" }`

                                                                              
[XO](HTTPS://GITHUB.COM/XOJS/XO)    *null-ls-[xo](https://github.com/xojs/xo)*

❤️ JavaScript/TypeScript linter (ESLint wrapper) with great defaults.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.xo }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "javascript", "javascriptreact", "typescript",
  "typescriptreact" }`
- Method: `diagnostics`
- Command: `xo`
- Args: `{ "--reporter", "json", "--stdin", "--stdin-filename", "$FILENAME" }`

                                                                              
[YAMLLINT](HTTPS://GITHUB.COM/ADRIENVERGE/YAMLLINT)*null-ls-[yamllint](https://github.com/adrienverge/yamllint)*

A linter for YAML files.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.yamllint }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "yaml" }`
- Method: `diagnostics`
- Command: `yamllint`
- Args: `{ "--format", "parsable", "-" }`

                                                                              
[ZSH](HTTPS://WWW.ZSH.ORG/)              *null-ls-[zsh](https://www.zsh.org/)*

Uses zsh's own -n option to evaluate, but not execute, zsh scripts.
Effectively, this acts somewhat like a linter, although it only really checks
for serious errors - and will likely only show the first error.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.diagnostics.zsh }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "zsh" }`
- Method: `diagnostics`
- Command: `zsh`
- Args: `{ "-n", "$FILENAME" }`

------------------------------------------------------------------------------
FORMATTING                                                *null-ls-formatting*



                                                                              
[ALEJANDRA](HTTPS://GITHUB.COM/KAMADORUEDA/ALEJANDRA)*null-ls-[alejandra](https://github.com/kamadorueda/alejandra)*

The Uncompromising Nix Code Formatter


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.alejandra }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "nix" }`
- Method: `formatting`
- Command: `alejandra`
- Args: `{ "--quiet" }`

                                                                              
[ASMFMT](HTTPS://GITHUB.COM/KLAUSPOST/ASMFMT)*null-ls-[asmfmt](https://github.com/klauspost/asmfmt)*

Format your assembler code in a similar way that `gofmt` formats your `go`
code.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.asmfmt }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "asm" }`
- Method: `formatting`
- Command: `asmfmt`

                                                                              
[ASTYLE](HTTP://ASTYLE.SOURCEFORGE.NET/)*null-ls-[astyle](http://astyle.sourceforge.net/)*

Artistic Style is a source code indenter, formatter, and beautifier for the C,
C++, C++/CLI, Objective‑C, C# and Java programming languages. This formatter
works well for Arduino <https://www.arduino.cc/> project files and is the same
formatter used in the Arduino IDE.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.astyle }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "arduino", "c", "cpp", "cs", "java" }`
- Method: `formatting`
- Command: `astyle`
- Args: `{ "--quiet" }`

                                                                              
[AUTOFLAKE](HTTPS://GITHUB.COM/PYCQA/AUTOFLAKE)*null-ls-[autoflake](https://github.com/pycqa/autoflake)*

Removes unused imports and unused variables as reported by pyflakes


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.autoflake }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "python" }`
- Method: `formatting`
- Command: `autoflake`
- Args: `{ "--stdin-display-name", "$FILENAME", "-" }`

                                                                              
[AUTOPEP8](HTTPS://GITHUB.COM/HHATTO/AUTOPEP8)*null-ls-[autopep8](https://github.com/hhatto/autopep8)*

A tool that automatically formats Python code to conform to the PEP 8 style
guide.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.autopep8 }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "python" }`
- Methods: `formatting, range_formatting`
- Command: `autopep8`
- Args: dynamically resolved (see source
  <https://github.com/jose-elias-alvarez/null-ls.nvim/blob/main/lua/null-ls/builtins/formatting/autopep8.lua>)

                                                                              
[BEAN_FORMAT](HTTPS://BEANCOUNT.GITHUB.IO/DOCS/RUNNING_BEANCOUNT_AND_GENERATING_REPORTS.HTML#BEAN-FORMAT)*null-ls-[bean_format](https://beancount.github.io/docs/running_beancount_and_generating_reports.html#bean-format)*

This pure text processing tool will reformat `beancount` input to right-align
all the numbers at the same, minimal column.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.bean_format }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "beancount" }`
- Method: `formatting`
- Command: `bean-format`

                                                                              
NOTES                                                          *null-ls-notes*

- It left-aligns all the currencies.
- It only modifies whitespace.

                                                                              
[BEAUTYSH](HTTPS://GITHUB.COM/LOVESEGFAULT/BEAUTYSH)*null-ls-[beautysh](https://github.com/lovesegfault/beautysh)*

A Bash beautifier for the masses.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.beautysh }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "bash", "csh", "ksh", "sh", "zsh" }`
- Method: `formatting`
- Command: `beautysh`
- Args: `{ "$FILENAME" }`

                                                                              
NOTES                                                          *null-ls-notes*

- In addition to Bash, Beautysh can format csh, ksh, sh and zsh.

                                                                              
[BIBCLEAN](HTTPS://WWW.CTAN.ORG/PKG/BIBCLEAN)*null-ls-[bibclean](https://www.ctan.org/pkg/bibclean)*

A portable program (written in C) that will pretty-print, syntax check, and
generally sort out a BibTeX database file.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.bibclean }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "bib" }`
- Method: `formatting`
- Command: `bibclean`
- Args: `{ "-align-equals", "-delete-empty-values" }`

                                                                              
NOTES                                                          *null-ls-notes*

- See bibclean: prettyprint and syntax check BibTeX and Scribe bibliography
  data base files <https://ftp.math.utah.edu/pub/bibclean/> for latest
  version.

                                                                              
[BLACK](HTTPS://GITHUB.COM/PSF/BLACK)*null-ls-[black](https://github.com/psf/black)*

The uncompromising Python code formatter


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.black }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "python" }`
- Method: `formatting`
- Command: `black`
- Args: `{ "--stdin-filename", "$FILENAME", "--quiet", "-" }`

                                                                              
[BLACKD](HTTPS://GITHUB.COM/PSF/BLACK)*null-ls-[blackd](https://github.com/psf/black)*

blackd is a small HTTP server that exposes Black’s functionality over a
simple protocol. The main benefit of using it is to avoid the cost of starting
up a new Black process every time you want to blacken a file. The only way to
configure the formatter is by using the provided config options, it will not
pick up on config files.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.blackd }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "python" }`
- Method: `formatting`

                                                                              
CONFIG                                                        *null-ls-config*


==============================================================================
`HOSTNAME` (STRING)                               *null-ls-hostname`-(string)*


Address to bind the server to. Defaults to localhost.


==============================================================================
`PORT` (STRING)                                       *null-ls-port`-(string)*


Port to listen on. Defaults to 45484.


==============================================================================
`LINE_LENGTH` (NUMBER)                         *null-ls-line_length`-(number)*


Set how many characters per line to allow. Defaults to 88.


==============================================================================
`SKIP_SOURCE_FIRST_LINE` (BOOLEAN) *null-ls-skip_source_first_line`-(boolean)*


If set to true, the first line of the source code will be ignored. Defaults to
false.


==============================================================================
`SKIP_STRING_NORMALIZATION` (BOOLEAN)*null-ls-skip_string_normalization`-(boolean)*


If set to true, no string normalization will be performed. Defaults to false.


==============================================================================
`SKIP_MAGIC_TRAILING_COMMA` (BOOLEAN)*null-ls-skip_magic_trailing_comma`-(boolean)*


If set to true, trailing commas will not be used as a reason to split lines.
Defaults to false.


==============================================================================
`PREVIEW` (BOOLEAN)                               *null-ls-preview`-(boolean)*


If set to true, experimental and potentially disruptive style changes will be
used. Defaults to false.


==============================================================================
`FAST` (BOOLEAN)                                     *null-ls-fast`-(boolean)*


If set to true, Black will not perform an AST safety check after formatting.
Defaults to false.


==============================================================================
`PYTHON_VARIANT` (STRING)                   *null-ls-python_variant`-(string)*


If set to pyi, Black will format all input files like typing stubs regardless
of the file extension. Otherwise, its value must correspond to a Python
version or a set of comma-separated Python versions, optionally prefixed with
py. (e.g. py3.5,py3.6). Defaults to empty string.


                                                                              
[BLADE_FORMATTER](HTTPS://GITHUB.COM/SHUFO/BLADE-FORMATTER)*null-ls-[blade_formatter](https://github.com/shufo/blade-formatter)*

An opinionated blade template formatter for Laravel that respects readability


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.blade_formatter }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "blade" }`
- Method: `formatting`
- Command: `blade-formatter`
- Args: `{ "--write", "$FILENAME" }`

                                                                              
[BLUE](HTTPS://GITHUB.COM/GRANTJENKS/BLUE)*null-ls-[blue](https://github.com/grantjenks/blue)*

Blue -- Some folks like black but I prefer blue.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.blue }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "python" }`
- Method: `formatting`
- Command: `blue`
- Args: `{ "--stdin-filename", "$FILENAME", "--quiet", "-" }`

                                                                              
[BRITTANY](HTTPS://GITHUB.COM/LSPITZNER/BRITTANY)*null-ls-[brittany](https://github.com/lspitzner/brittany)*

haskell source code formatter


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.brittany }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "haskell" }`
- Method: `formatting`
- Command: `brittany`

                                                                              
[BSFMT](HTTPS://GITHUB.COM/ROKUCOMMUNITY/BRIGHTERSCRIPT-FORMATTER)*null-ls-[bsfmt](https://github.com/rokucommunity/brighterscript-formatter)*

A code formatter for BrightScript and BrighterScript.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.bsfmt }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "brs" }`
- Method: `formatting`
- Command: `bsfmt`
- Args: `{ "$FILENAME" }`

                                                                              
[BUF](HTTPS://GITHUB.COM/BUFBUILD/BUF)*null-ls-[buf](https://github.com/bufbuild/buf)*

A new way of working with Protocol Buffers.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.buf }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "proto" }`
- Method: `formatting`
- Command: `buf`
- Args: `{ "format", "-w", "$FILENAME" }`

                                                                              
[BUILDIFIER](HTTPS://GITHUB.COM/BAZELBUILD/BUILDTOOLS/TREE/MASTER/BUILDIFIER)*null-ls-[buildifier](https://github.com/bazelbuild/buildtools/tree/master/buildifier)*

buildifier is a tool for formatting and linting bazel BUILD, WORKSPACE, and
.bzl files.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.buildifier }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "bzl" }`
- Method: `formatting`
- Command: `buildifier`
- Args: `{ "-path=$FILENAME" }`

                                                                              
[CABAL_FMT](HTTPS://HACKAGE.HASKELL.ORG/PACKAGE/CABAL-FMT)*null-ls-[cabal_fmt](https://hackage.haskell.org/package/cabal-fmt)*

Format .cabal files preserving the original field ordering, and comments.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.cabal_fmt }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "cabal" }`
- Method: `formatting`
- Command: `cabal-fmt`

                                                                              
[CBFMT](HTTPS://GITHUB.COM/LUKAS-REINEKE/CBFMT)*null-ls-[cbfmt](https://github.com/lukas-reineke/cbfmt)*

A tool to format codeblocks inside markdown and org documents.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.cbfmt }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "markdown", "org" }`
- Method: `formatting`
- Command: `cbfmt`
- Args: `{ "--stdin-filepath", "$FILENAME", "--best-effort" }`

                                                                              
[CLANG_FORMAT](HTTPS://WWW.KERNEL.ORG/DOC/HTML/LATEST/PROCESS/CLANG-FORMAT.HTML)*null-ls-[clang_format](https://www.kernel.org/doc/html/latest/process/clang-format.html)*

Tool to format C/C++/… code according to a set of rules and heuristics.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.clang_format }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "c", "cpp", "cs", "java", "cuda", "proto" }`
- Methods: `formatting, range_formatting`
- Command: `clang-format`
- Args: dynamically resolved (see source
  <https://github.com/jose-elias-alvarez/null-ls.nvim/blob/main/lua/null-ls/builtins/formatting/clang_format.lua>)

                                                                              
[CLJSTYLE](HTTPS://GITHUB.COM/GREGLOOK/CLJSTYLE)*null-ls-[cljstyle](https://github.com/greglook/cljstyle)*

Formatter for Clojure code.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.cljstyle }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "clojure" }`
- Method: `formatting`
- Command: `cljstyle`
- Args: `{ "pipe" }`

                                                                              
[CMAKE_FORMAT](HTTPS://GITHUB.COM/CHESHIREKOW/CMAKE_FORMAT)*null-ls-[cmake_format](https://github.com/cheshirekow/cmake_format)*

Parse cmake listfiles and format them nicely.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.cmake_format }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "cmake" }`
- Method: `formatting`
- Command: `cmake-format`
- Args: `{ "-" }`

                                                                              
[CODESPELL](HTTPS://GITHUB.COM/CODESPELL-PROJECT/CODESPELL)*null-ls-[codespell](https://github.com/codespell-project/codespell)*

Fix common misspellings in text files.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.codespell }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{}`
- Method: `formatting`
- Command: `codespell`
- Args: `{ "--check-hidden", "--write-changes", "$FILENAME" }`

                                                                              
[CRYSTAL_FORMAT](HTTPS://GITHUB.COM/CRYSTAL-LANG/CRYSTAL)*null-ls-[crystal_format](https://github.com/crystal-lang/crystal)*

A tool for automatically checking and correcting the style of code in a
project.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.crystal_format }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "crystal" }`
- Method: `formatting`
- Command: `crystal`
- Args: `{ "tool", "format", "-" }`

                                                                              
[CSHARPIER](HTTPS://CSHARPIER.COM/)*null-ls-[csharpier](https://csharpier.com/)*

CSharpier is an opinionated code formatter for c#


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.csharpier }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "cs" }`
- Method: `formatting`
- Command: `dotnet-csharpier`
- Args: `{ "--write-stdout" }`

                                                                              
[CUEIMPORTS](HTTPS://PKG.GO.DEV/GITHUB.COM/ASDINE/CUEIMPORTS)*null-ls-[cueimports](https://pkg.go.dev/github.com/asdine/cueimports)*

CUE tool that updates your import lines, adding missing ones and removing
unused ones.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.cueimports }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "cue" }`
- Method: `formatting`
- Command: `cueimports`

                                                                              
[CUE_FMT](HTTPS://CUELANG.ORG/)      *null-ls-[cue_fmt](https://cuelang.org/)*

A CUE language formatter.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.cue_fmt }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "cue" }`
- Method: `formatting`
- Command: `cue`
- Args: `{ "fmt", "$FILENAME" }`

                                                                              
[DART_FORMAT](HTTPS://DART.DEV/TOOLS/DART-FORMAT)*null-ls-[dart_format](https://dart.dev/tools/dart-format)*

Replace the whitespace in your program with formatting that follows Dart
guidelines.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.dart_format }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "dart" }`
- Method: `formatting`
- Command: `dart`
- Args: `{ "format" }`

                                                                              
[DENO_FMT](HTTPS://DENO.LAND/MANUAL/TOOLS/FORMATTER)*null-ls-[deno_fmt](https://deno.land/manual/tools/formatter)*

Use Deno <https://deno.land/> to format TypeScript, JavaScript/JSON and
markdown.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = {
        null_ls.builtins.formatting.deno_fmt, -- will use the source for all supported file types
        null_ls.builtins.formatting.deno_fmt.with({
    		filetypes = { "markdown" }, -- only runs `deno fmt` for markdown
        }),
    }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "javascript", "javascriptreact", "json", "jsonc", "markdown",
  "typescript", "typescriptreact" }`
- Method: `formatting`
- Command: `deno`
- Args: dynamically resolved (see source
  <https://github.com/jose-elias-alvarez/null-ls.nvim/blob/main/lua/null-ls/builtins/formatting/deno_fmt.lua>)

                                                                              
NOTES                                                          *null-ls-notes*

- `deno fmt` supports formatting JS/X, TS/X, JSON and markdown. If you only
  want deno to format a subset of these filetypes you can overwrite these with
  `.with({filetypes={}}`)

                                                                              
[DFMT](HTTPS://GITHUB.COM/DLANG-COMMUNITY/DFMT)*null-ls-[dfmt](https://github.com/dlang-community/dfmt)*

Formatter for D source code.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.dfmt }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "d" }`
- Method: `formatting`
- Command: `dfmt`

                                                                              
[DJHTML](HTTPS://GITHUB.COM/RTTS/DJHTML)*null-ls-[djhtml](https://github.com/rtts/djhtml)*

A pure-Python Django/Jinja template indenter without dependencies.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.djhtml }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "django", "jinja.html", "htmldjango" }`
- Method: `formatting`
- Command: `djhtml`
- Args: `{ "-" }`

                                                                              
[DJLINT](HTTPS://GITHUB.COM/RIVERSIDE-HEALTHCARE/DJLINT)*null-ls-[djlint](https://github.com/riverside-healthcare/djlint)*

✨ 📜 🪄 ✨ HTML Template Linter and Formatter.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.djlint }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "django", "jinja.html", "htmldjango" }`
- Method: `formatting`
- Command: `djlint`
- Args: `{ "--reformat", "-" }`

                                                                              
[DOCFORMATTER](HTTPS://GITHUB.COM/PYCQA/DOCFORMATTER)*null-ls-[docformatter](https://github.com/pycqa/docformatter)*

Python formatter complaint with the PEP 257 standard


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.docformatter }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "python" }`
- Method: `formatting`
- Command: `docformatter`
- Args: `{ "-" }`

                                                                              
[DPRINT](HTTPS://DPRINT.DEV/)          *null-ls-[dprint](https://dprint.dev/)*

A pluggable and configurable code formatting platform written in Rust.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.dprint }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "javascript", "javascriptreact", "typescript",
  "typescriptreact", "json", "markdown", "toml", "rust", "roslyn" }`
- Method: `formatting`
- Command: `dprint`
- Args: `{ "fmt", "--stdin", "$FILENAME" }`

                                                                              
NOTES                                                          *null-ls-notes*

- you need to install dprint to use this builtin and then run `dprint init` to
  initialize it in your project directory.

                                                                              
[DTSFMT](HTTPS://GITHUB.COM/DTS-LANG/RUSTFMT)*null-ls-[dtsfmt](https://github.com/dts-lang/rustfmt)*

Auto formatter for device tree source files


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.dtsfmt }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "dts" }`
- Method: `formatting`
- Command: `dtsfmt`
- Args: `{ "--emit=stdout" }`

                                                                              
NOTES                                                          *null-ls-notes*

- Requires that `dtsfmt` is executable and on $PATH.

                                                                              
[ELM_FORMAT](HTTPS://GITHUB.COM/AVH4/ELM-FORMAT)*null-ls-[elm_format](https://github.com/avh4/elm-format)*

elm-format formats Elm source code according to a standard set of rules based
on the official Elm Style Guide <https://elm-lang.org/docs/style-guide>.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.elm_format }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "elm" }`
- Method: `formatting`
- Command: `elm-format`
- Args: `{ "--stdin" }`

                                                                              
[EMACS_SCHEME_MODE](HTTPS://WWW.GNU.ORG/SAVANNAH-CHECKOUTS/GNU/EMACS/EMACS.HTML)*null-ls-[emacs_scheme_mode](https://www.gnu.org/savannah-checkouts/gnu/emacs/emacs.html)*

An extensible, customizable, free/libre text editor — and more. Basically,
using emacs in batch mode to format scheme files.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.emacs_scheme_mode }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "scheme", "scheme.guile" }`
- Method: `formatting`
- Command: `emacs`
- Args: dynamically resolved (see source
  <https://github.com/jose-elias-alvarez/null-ls.nvim/blob/main/lua/null-ls/builtins/formatting/emacs_scheme_mode.lua>)

                                                                              
NOTES                                                          *null-ls-notes*

- Adjust the expression evaluated with the `--eval` flag to change settings
  within emacs.

                                                                              
[EMACS_VHDL_MODE](HTTPS://GUEST.IIS.EE.ETHZ.CH/~ZIMMI/EMACS/VHDL-MODE.HTML)*null-ls-[emacs_vhdl_mode](https://guest.iis.ee.ethz.ch/~zimmi/emacs/vhdl-mode.html)*

VHDL Mode is an Emacs major mode for editing VHDL code. Basically, using emacs
in batch mode to format VHDL files.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.emacs_vhdl_mode }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "vhdl" }`
- Method: `formatting`
- Command: `emacs`
- Args: dynamically resolved (see source
  <https://github.com/jose-elias-alvarez/null-ls.nvim/blob/main/lua/null-ls/builtins/formatting/emacs_vhdl_mode.lua>)

                                                                              
NOTES                                                          *null-ls-notes*

- Adjust the expression evaluated with the `--eval` flag to change settings
  within emacs.

                                                                              
[ERB_FORMAT](HTTPS://GITHUB.COM/NEBULAB/ERB-FORMATTER)*null-ls-[erb_format](https://github.com/nebulab/erb-formatter)*

Format ERB files with speed and precision.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.erb_format }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "eruby" }`
- Method: `formatting`
- Command: `erb-format`
- Args: `{ "--stdin" }`

                                                                              
[ERB_LINT](HTTPS://GITHUB.COM/SHOPIFY/ERB-LINT)*null-ls-[erb_lint](https://github.com/shopify/erb-lint)*

Lint your ERB or HTML files


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.erb_lint }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "eruby" }`
- Method: `formatting`
- Command: `erblint`
- Args: `{ "--autocorrect", "--stdin", "$FILENAME" }`

                                                                              
[ERLFMT](HTTPS://GITHUB.COM/WHATSAPP/ERLFMT)*null-ls-[erlfmt](https://github.com/whatsapp/erlfmt)*

An opinionated Erlang code formatter.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.erlfmt }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "erlang" }`
- Method: `formatting`
- Command: `erlfmt`
- Args: `{ "-" }`

                                                                              
[ESLINT](HTTPS://GITHUB.COM/ESLINT/ESLINT)*null-ls-[eslint](https://github.com/eslint/eslint)*

Find and fix problems in your JavaScript code.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.eslint }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "javascript", "javascriptreact", "typescript",
  "typescriptreact", "vue" }`
- Method: `formatting`
- Command: `eslint`
- Args: `{ "--fix-dry-run", "--format", "json", "--stdin", "--stdin-filename",
  "$FILENAME" }`

                                                                              
NOTES                                                          *null-ls-notes*

- Slow and not suitable for formatting on save. If at all possible, use
  eslint_d <https://github.com/mantoni/eslint_d.js/>.

                                                                              
[ESLINT_D](HTTPS://GITHUB.COM/MANTONI/ESLINT_D.JS/)*null-ls-[eslint_d](https://github.com/mantoni/eslint_d.js/)*

Like ESLint, but faster.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.eslint_d }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "javascript", "javascriptreact", "typescript",
  "typescriptreact", "vue" }`
- Method: `formatting`
- Command: `eslint_d`
- Args: `{ "--fix-to-stdout", "--stdin", "--stdin-filename", "$FILENAME" }`

                                                                              
NOTES                                                          *null-ls-notes*

- Once spawned, the server will continue to run in the background. This is
  normal and not related to null-ls. You can stop it by running `eslint_d
  stop` from the command line.

                                                                              
[FANTOMAS](HTTPS://GITHUB.COM/FSPROJECTS/FANTOMAS)*null-ls-[fantomas](https://github.com/fsprojects/fantomas)*

FSharp source code formatter.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.fantomas }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "fsharp" }`
- Method: `formatting`
- Command: `fantomas`
- Args: `{ "$FILENAME" }`

                                                                              
[FISH_INDENT](HTTPS://FISHSHELL.COM/DOCS/CURRENT/CMDS/FISH_INDENT.HTML)*null-ls-[fish_indent](https://fishshell.com/docs/current/cmds/fish_indent.html)*

Indent or otherwise prettify a piece of fish code.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.fish_indent }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "fish" }`
- Method: `formatting`
- Command: `fish_indent`

                                                                              
[FIXJSON](HTTPS://GITHUB.COM/RHYSD/FIXJSON)*null-ls-[fixjson](https://github.com/rhysd/fixjson)*

A JSON file fixer/formatter for humans using (relaxed) JSON5.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.fixjson }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "json" }`
- Method: `formatting`
- Command: `fixjson`

                                                                              
[FNLFMT](HTTPS://GIT.SR.HT/~TECHNOMANCY/FNLFMT)*null-ls-[fnlfmt](https://git.sr.ht/~technomancy/fnlfmt)*

fnlfmt is a Fennel code formatter which follows established Lisp conventions
when determining how to format a given piece of code.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.fnlfmt }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "fennel", "fnl" }`
- Method: `formatting`
- Command: `fnlfmt`
- Args: `{ "-" }`

                                                                              
[FORGE_FMT](HTTPS://BOOK.GETFOUNDRY.SH/REFERENCE/CONFIG/FORMATTER)*null-ls-[forge_fmt](https://book.getfoundry.sh/reference/config/formatter)*

Formats Solidity source files.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.forge_fmt }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "solidity" }`
- Method: `formatting`
- Command: `forge`
- Args: `{ "fmt", "$FILENAME" }`

                                                                              
[FORMAT_R](HTTPS://GITHUB.COM/YIHUI/FORMATR)*null-ls-[format_r](https://github.com/yihui/formatr)*

Format R code automatically.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.format_r }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "r", "rmd" }`
- Method: `formatting`
- Command: `R`
- Args: dynamically resolved (see source
  <https://github.com/jose-elias-alvarez/null-ls.nvim/blob/main/lua/null-ls/builtins/formatting/format_r.lua>)

                                                                              
[FOURMOLU](HTTPS://HACKAGE.HASKELL.ORG/PACKAGE/FOURMOLU)*null-ls-[fourmolu](https://hackage.haskell.org/package/fourmolu)*

Fourmolu is a formatter for Haskell source code.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.fourmolu }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "haskell" }`
- Method: `formatting`
- Command: `fourmolu`
- Args: `{ "--stdin-input-file", "$FILENAME" }`

                                                                              
[FPRETTIFY](HTTPS://GITHUB.COM/PSEEWALD/FPRETTIFY)*null-ls-[fprettify](https://github.com/pseewald/fprettify)*

fprettify is an auto-formatter for modern Fortran code that imposes strict
whitespace formatting, written in Python.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.fprettify }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "fortran" }`
- Method: `formatting`
- Command: `fprettify`
- Args: `{ "--silent" }`

                                                                              
[GDFORMAT](HTTPS://GITHUB.COM/SCONY/GODOT-GDSCRIPT-TOOLKIT)*null-ls-[gdformat](https://github.com/scony/godot-gdscript-toolkit)*

A formatter for Godot's gdscript


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.gdformat }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "gd", "gdscript", "gdscript3" }`
- Method: `formatting`
- Command: `gdformat`
- Args: `{ "-" }`

                                                                              
[GERSEMI](HTTPS://GITHUB.COM/BLANKSPRUCE/GERSEMI)*null-ls-[gersemi](https://github.com/blankspruce/gersemi)*

A formatter to make your CMake code the real treasure


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.gersemi }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "cmake" }`
- Method: `formatting`
- Command: `gersemi`
- Args: `{ "-" }`

                                                                              
[GN_FORMAT](HTTP://GN.GOOGLESOURCE.COM/GN)*null-ls-[gn_format](http://gn.googlesource.com/gn)*

Format your GN code!


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.gn_format }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "gn" }`
- Method: `formatting`
- Command: `gn`
- Args: `{ "format", "--stdin" }`

                                                                              
NOTES                                                          *null-ls-notes*

- Install google depot_tools to use gn

                                                                              
[GOFMT](HTTPS://PKG.GO.DEV/CMD/GOFMT)*null-ls-[gofmt](https://pkg.go.dev/cmd/gofmt)*

Formats go programs.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.gofmt }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "go" }`
- Method: `formatting`
- Command: `gofmt`

                                                                              
NOTES                                                          *null-ls-notes*

- It uses tabs for indentation and blanks for alignment.
- Aligntment assumes that the editor is using a fixed-width font.

                                                                              
[GOFUMPT](HTTPS://GITHUB.COM/MVDAN/GOFUMPT)*null-ls-[gofumpt](https://github.com/mvdan/gofumpt)*

Enforce a stricter format than gofmt, while being backwards compatible. That
is, gofumpt is happy with a subset of the formats that gofmt is happy with.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.gofumpt }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "go" }`
- Method: `formatting`
- Command: `gofumpt`

                                                                              
[GOIMPORTS](HTTPS://PKG.GO.DEV/GOLANG.ORG/X/TOOLS/CMD/GOIMPORTS)*null-ls-[goimports](https://pkg.go.dev/golang.org/x/tools/cmd/goimports)*

Updates your Go import lines, adding missing ones and removing unreferenced
ones.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.goimports }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "go" }`
- Method: `formatting`
- Command: `goimports`
- Args: `{ "-srcdir", "$DIRNAME" }`

                                                                              
[GOIMPORTS_REVISER](HTTPS://PKG.GO.DEV/GITHUB.COM/INCU6US/GOIMPORTS-REVISER)*null-ls-[goimports_reviser](https://pkg.go.dev/github.com/incu6us/goimports-reviser)*

Tool for Golang to sort goimports by 3 groups: std, general and project
dependencies.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.goimports_reviser }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "go" }`
- Method: `formatting`
- Command: `goimports-reviser`
- Args: `{ "$FILENAME" }`

                                                                              
[GOLINES](HTTPS://PKG.GO.DEV/GITHUB.COM/SEGMENTIO/GOLINES)*null-ls-[golines](https://pkg.go.dev/github.com/segmentio/golines)*

Applies a base formatter (eg. goimports or gofmt), then shortens long lines of
code.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.golines }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "go" }`
- Method: `formatting`
- Command: `golines`

                                                                              
[GOOGLE_JAVA_FORMAT](HTTPS://GITHUB.COM/GOOGLE/GOOGLE-JAVA-FORMAT)*null-ls-[google_java_format](https://github.com/google/google-java-format)*

Reformats Java source code according to Google Java Style.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.google_java_format }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "java" }`
- Methods: `formatting, range_formatting`
- Command: `google-java-format`
- Args: dynamically resolved (see source
  <https://github.com/jose-elias-alvarez/null-ls.nvim/blob/main/lua/null-ls/builtins/formatting/google_java_format.lua>)

                                                                              
[HAXE_FORMATTER](HTTPS://GITHUB.COM/HAXECHECKSTYLE/HAXE-FORMATTER)*null-ls-[haxe_formatter](https://github.com/haxecheckstyle/haxe-formatter)*

Haxe code formatter based on tokentree


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.haxe_formatter }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "haxe" }`
- Method: `formatting`
- Command: `haxelib`
- Args: `{ "run", "formatter", "--stdin", "--source", "$FILENAME" }`

                                                                              
[HCLFMT](HTTPS://GITHUB.COM/FATIH/HCLFMT)*null-ls-[hclfmt](https://github.com/fatih/hclfmt)*

Formatter for HCL configuration files


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.hclfmt }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "hcl" }`
- Method: `formatting`
- Command: `hclfmt`

                                                                              
[HTMLBEAUTIFIER](HTTPS://GITHUB.COM/THREEDAYMONK/HTMLBEAUTIFIER)*null-ls-[htmlbeautifier](https://github.com/threedaymonk/htmlbeautifier)*

A normaliser/beautifier for HTML that also understands embedded Ruby. Ideal
for tidying up Rails templates.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.htmlbeautifier }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "eruby" }`
- Method: `formatting`
- Command: `htmlbeautifier`
- Args: `{}`

                                                                              
[ISORT](HTTPS://GITHUB.COM/PYCQA/ISORT)*null-ls-[isort](https://github.com/pycqa/isort)*

Python utility / library to sort imports alphabetically and automatically
separate them into sections and by type.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.isort }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "python" }`
- Method: `formatting`
- Command: `isort`
- Args: `{ "--stdout", "--filename", "$FILENAME", "-" }`

                                                                              
[ISORTD](HTTPS://GITHUB.COM/URM8/ISORTD)*null-ls-[isortd](https://github.com/urm8/isortd)*

isortd is a small HTTP server that exposes isort’s functionality over a
simple protocol. The main benefit of using it is to avoid the cost of starting
up a new isort process every time you want to format a file.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.isortd }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "python" }`
- Method: `formatting`

                                                                              
CONFIG                                                        *null-ls-config*


==============================================================================
`HOSTNAME` (STRING)                               *null-ls-hostname`-(string)*


Address that the isortd server listens on. Defaults to localhost.


==============================================================================
`PORT` (STRING)                                       *null-ls-port`-(string)*


Port that the isortd server listens on. Defaults to 47393.


                                                                              
[JOKER](HTTPS://GITHUB.COM/CANDID82/JOKER)*null-ls-[joker](https://github.com/candid82/joker)*

joker is a small Clojure interpreter, linter and formatter written in Go.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.joker }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "clj" }`
- Method: `formatting`
- Command: `joker`
- Args: `{ "--format", "-" }`

                                                                              
[JQ](HTTPS://GITHUB.COM/STEDOLAN/JQ)*null-ls-[jq](https://github.com/stedolan/jq)*

Command-line JSON processor


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.jq }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "json" }`
- Method: `formatting`
- Command: `jq`

                                                                              
[JSONNETFMT](HTTPS://GITHUB.COM/GOOGLE/JSONNET)*null-ls-[jsonnetfmt](https://github.com/google/jsonnet)*

Formats jsonnet files.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.jsonnetfmt }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "jsonnet" }`
- Method: `formatting`
- Command: `jsonnetfmt`
- Args: `{ "-" }`

                                                                              
[JSON_TOOL](HTTPS://DOCS.PYTHON.ORG/3/LIBRARY/JSON.HTML#MODULE-JSON.TOOL)*null-ls-[json_tool](https://docs.python.org/3/library/json.html#module-json.tool)*

Provides a simple command line interface to validate and pretty-print JSON
objects.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.json_tool }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "json" }`
- Method: `formatting`
- Command: `python`
- Args: `{ "-m", "json.tool" }`

                                                                              
[JUST](HTTPS://JUST.SYSTEMS/)          *null-ls-[just](https://just.systems/)*

Format your Justfile


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.just }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "just" }`
- Method: `formatting`
- Command: `just`
- Args: `{ "--fmt", "--unstable", "-f", "$FILENAME" }`

                                                                              
[KTLINT](HTTPS://KTLINT.GITHUB.IO/)*null-ls-[ktlint](https://ktlint.github.io/)*

An anti-bikeshedding Kotlin linter with built-in formatter.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.ktlint }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "kotlin" }`
- Method: `formatting`
- Command: `ktlint`
- Args: `{ "--format", "--stdin", "**/*.kt", "**/*.kts" }`

                                                                              
[LATEXINDENT](HTTPS://GITHUB.COM/CMHUGHES/LATEXINDENT.PL)*null-ls-[latexindent](https://github.com/cmhughes/latexindent.pl)*

A perl script for formatting LaTeX files that is generally included in major
TeX distributions.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.latexindent }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "tex" }`
- Method: `formatting`
- Command: `latexindent`
- Args: `{ "-" }`

                                                                              
[LEPTOSFMT](HTTPS://GITHUB.COM/BRAM209/LEPTOSFMT)*null-ls-[leptosfmt](https://github.com/bram209/leptosfmt)*

A formatter for the leptos view! macro


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.leptosfmt }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "rust" }`
- Method: `formatting`
- Command: `leptosfmt`
- Args: `{ "--quiet=true", "--stdin=true" }`

                                                                              
[LUA_FORMAT](HTTPS://GITHUB.COM/KOIHIK/LUAFORMATTER)*null-ls-[lua_format](https://github.com/koihik/luaformatter)*

Reformats your Lua source code.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.lua_format }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "lua" }`
- Method: `formatting`
- Command: `lua-format`
- Args: `{ "-i" }`

                                                                              
[MARKDOWNLINT](HTTPS://GITHUB.COM/IGORSHUBOVYCH/MARKDOWNLINT-CLI)*null-ls-[markdownlint](https://github.com/igorshubovych/markdownlint-cli)*

A Node.js style checker and lint tool for Markdown/CommonMark files.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.markdownlint }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "markdown" }`
- Method: `formatting`
- Command: `markdownlint`
- Args: `{ "--fix", "$FILENAME" }`

                                                                              
NOTES                                                          *null-ls-notes*

- Can fix some (but not all!) markdownlint issues. If possible, use Prettier
  <https://github.com/prettier/prettier>, which can also fix Markdown files.

                                                                              
[MARKDOWN_TOC](HTTPS://GITHUB.COM/JONSCHLINKERT/MARKDOWN-TOC)*null-ls-[markdown_toc](https://github.com/jonschlinkert/markdown-toc)*

API and CLI for generating a markdown TOC (table of contents) for a README or
any markdown files.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.markdown_toc }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "markdown" }`
- Method: `formatting`
- Command: `markdown-toc`
- Args: `{ "-i", "$FILENAME" }`

                                                                              
NOTES                                                          *null-ls-notes*

- To generate a TOC, add `<!-- toc -->` before headers in your markdown file.

                                                                              
[MDFORMAT](HTTPS://GITHUB.COM/EXECUTABLEBOOKS/MDFORMAT)*null-ls-[mdformat](https://github.com/executablebooks/mdformat)*

An opinionated Markdown formatter that can be used to enforce a consistent
style in Markdown files


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.mdformat }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "markdown" }`
- Method: `formatting`
- Command: `mdformat`
- Args: `{ "$FILENAME" }`

                                                                              
NOTES                                                          *null-ls-notes*

- Mdformat offers an extensible plugin system for both code fence content
  formatting and Markdown parser extensions (like GFM tables). A comprehensive
  list of plugins is documented here
  <https://mdformat.readthedocs.io/en/stable/users/plugins.html>

                                                                              
[MIX](HTTPS://HEXDOCS.PM/MIX/1.12/MIX.HTML)*null-ls-[mix](https://hexdocs.pm/mix/1.12/mix.html)*

Build tool that provides tasks for creating, compiling, and testing elixir
projects, managing its dependencies, and more.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.mix }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "elixir" }`
- Method: `formatting`
- Command: `mix`
- Args: `{ "format", "--stdin-filename", "$FILENAME", "-" }`

                                                                              
[NGINX_BEAUTIFIER](HTTPS://GITHUB.COM/VASILEVICH/NGINXBEAUTIFIER)*null-ls-[nginx_beautifier](https://github.com/vasilevich/nginxbeautifier)*

Beautifies and formats nginx configuration files.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.nginx_beautifier }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "nginx" }`
- Method: `formatting`
- Command: `nginxbeautifier`
- Args: `{ "-i", "-o", "$FILENAME" }`

                                                                              
[NIMPRETTY](HTTPS://NIM-LANG.ORG/DOCS/TOOLS.HTML)*null-ls-[nimpretty](https://nim-lang.org/docs/tools.html)*

nimpretty is a Nim source code beautifier, to format code according to the
official style guide.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.nimpretty }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "nim" }`
- Method: `formatting`
- Command: `nimpretty`
- Args: `{ "$FILENAME" }`

                                                                              
[NIXFMT](HTTPS://GITHUB.COM/SEROKELL/NIXFMT)*null-ls-[nixfmt](https://github.com/serokell/nixfmt)*

nixfmt is a formatter for Nix code, intended to apply a uniform style.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.nixfmt }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "nix" }`
- Method: `formatting`
- Command: `nixfmt`

                                                                              
[NIXPKGS_FMT](HTTPS://GITHUB.COM/NIX-COMMUNITY/NIXPKGS-FMT)*null-ls-[nixpkgs_fmt](https://github.com/nix-community/nixpkgs-fmt)*

nixpkgs-fmt is a Nix code formatter for nixpkgs.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.nixpkgs_fmt }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "nix" }`
- Method: `formatting`
- Command: `nixpkgs-fmt`

                                                                              
[NPM_GROOVY_LINT](HTTPS://GITHUB.COM/NVUILLAM/NPM-GROOVY-LINT)*null-ls-[npm_groovy_lint](https://github.com/nvuillam/npm-groovy-lint)*

Lint, format and auto-fix Groovy, Jenkinsfile, and Gradle files.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.npm_groovy_lint }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "groovy", "java", "Jenkinsfile" }`
- Method: `formatting`
- Command: `npm-groovy-lint`
- Args: `{ "--format", "-" }`

                                                                              
[OCAMLFORMAT](HTTPS://GITHUB.COM/OCAML-PPX/OCAMLFORMAT)*null-ls-[ocamlformat](https://github.com/ocaml-ppx/ocamlformat)*

Auto-formatter for OCaml code


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.ocamlformat }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "ocaml" }`
- Method: `formatting`
- Command: `ocamlformat`
- Args: `{ "--enable-outside-detected-project", "--name", "$FILENAME", "-" }`

                                                                              
[OCDC](HTTPS://GITHUB.COM/MDWINT/OCDC)*null-ls-[ocdc](https://github.com/mdwint/ocdc)*

A changelog formatter


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.ocdc }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "markdown" }`
- Method: `formatting`
- Command: `ocdc`
- Args: `{ "--path", "-" }`

                                                                              
[PACKER](HTTPS://WWW.PACKER.IO/DOCS/COMMANDS/FMT)*null-ls-[packer](https://www.packer.io/docs/commands/fmt)*

The packer fmt Packer command is used to format HCL2 configuration files to a
canonical format and style.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.packer }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "hcl" }`
- Method: `formatting`
- Command: `packer`
- Args: `{ "fmt", "-" }`

                                                                              
[PERLIMPORTS](HTTPS://METACPAN.ORG/DIST/APP-PERLIMPORTS/VIEW/SCRIPT/PERLIMPORTS)*null-ls-[perlimports](https://metacpan.org/dist/app-perlimports/view/script/perlimports)*

A command line utility for cleaning up imports in your Perl code


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.perlimports }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "perl" }`
- Method: `formatting`
- Command: `perlimports`
- Args: `{ "--read-stdin", "--filename", "$FILENAME" }`

                                                                              
[PERLTIDY](HTTP://PERLTIDY.SOURCEFORGE.NET/)*null-ls-[perltidy](http://perltidy.sourceforge.net/)*

perl script which indents and reformats perl scripts to make them easier to
read. If you write perl scripts, or spend much time reading them, you will
probably find it useful.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.perltidy }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "perl" }`
- Method: `formatting`
- Command: `perltidy`
- Args: `{ "-q" }`

                                                                              
[PG_FORMAT](HTTPS://GITHUB.COM/DAROLD/PGFORMATTER)*null-ls-[pg_format](https://github.com/darold/pgformatter)*

PostgreSQL SQL syntax beautifier


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.pg_format }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "sql", "pgsql" }`
- Method: `formatting`
- Command: `pg_format`

                                                                              
[PHPCBF](HTTPS://GITHUB.COM/SQUIZLABS/PHP_CODESNIFFER)*null-ls-[phpcbf](https://github.com/squizlabs/php_codesniffer)*

Tokenizes PHP files and detects violations of a defined set of coding
standards.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.phpcbf }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "php" }`
- Method: `formatting`
- Command: `phpcbf`
- Args: `{ "-q", "--stdin-path=$FILENAME", "-" }`

                                                                              
[PHPCSFIXER](HTTPS://GITHUB.COM/PHP-CS-FIXER/PHP-CS-FIXER)*null-ls-[phpcsfixer](https://github.com/php-cs-fixer/php-cs-fixer)*

Formatter for php files.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.phpcsfixer }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "php" }`
- Method: `formatting`
- Command: `php-cs-fixer`
- Args: `{ "--no-interaction", "--quiet", "fix", "$FILENAME" }`

                                                                              
[PINT](HTTPS://GITHUB.COM/LARAVEL/PINT)*null-ls-[pint](https://github.com/laravel/pint)*

An opinionated PHP code style fixer for minimalists.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.pint }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "php" }`
- Method: `formatting`
- Command: `./vendor/bin/pint`
- Args: `{ "--no-interaction", "--quiet", "$FILENAME" }`

                                                                              
[PRETTIER](HTTPS://GITHUB.COM/PRETTIER/PRETTIER)*null-ls-[prettier](https://github.com/prettier/prettier)*

Prettier is an opinionated code formatter. It enforces a consistent style by
parsing your code and re-printing it with its own rules that take the maximum
line length into account, wrapping code when necessary.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.prettier }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "javascript", "javascriptreact", "typescript",
  "typescriptreact", "vue", "css", "scss", "less", "html", "json", "jsonc",
  "yaml", "markdown", "markdown.mdx", "graphql", "handlebars" }`
- Methods: `formatting, range_formatting`
- Command: `prettier`
- Args: dynamically resolved (see source
  <https://github.com/jose-elias-alvarez/null-ls.nvim/blob/main/lua/null-ls/builtins/formatting/prettier.lua>)

                                                                              
NOTES                                                          *null-ls-notes*

- Supports more filetypes such as Svelte
  <https://github.com/sveltejs/prettier-plugin-svelte> and TOML
  <https://github.com/bd82/toml-tools/tree/master/packages/prettier-plugin-toml>
  via plugins. These filetypes are not enabled by default, but you can follow
  the instructions here <BUILTIN_CONFIG.md#filetypes> to define your own list
  of filetypes.
- To increase speed, you may want to try prettierd
  <https://github.com/fsouza/prettierd>. You can also set up
  eslint-plugin-prettier <https://github.com/prettier/eslint-plugin-prettier>
  and format via eslint_d <https://github.com/mantoni/eslint_d.js/>.

                                                                              
[PRETTIERD](HTTPS://GITHUB.COM/FSOUZA/PRETTIERD)*null-ls-[prettierd](https://github.com/fsouza/prettierd)*

prettier, as a daemon, for ludicrous formatting speed.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.prettierd }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "javascript", "javascriptreact", "typescript",
  "typescriptreact", "vue", "css", "scss", "less", "html", "json", "jsonc",
  "yaml", "markdown", "markdown.mdx", "graphql", "handlebars" }`
- Methods: `formatting, range_formatting`
- Command: `prettierd`
- Args: dynamically resolved (see source
  <https://github.com/jose-elias-alvarez/null-ls.nvim/blob/main/lua/null-ls/builtins/formatting/prettierd.lua>)

                                                                              
[PRETTIER_D_SLIM](HTTPS://GITHUB.COM/MIKEW/PRETTIER_D_SLIM)*null-ls-[prettier_d_slim](https://github.com/mikew/prettier_d_slim)*

Makes prettier fast.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.prettier_d_slim }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "javascript", "javascriptreact", "typescript",
  "typescriptreact", "vue", "css", "scss", "less", "html", "json", "jsonc",
  "yaml", "markdown", "markdown.mdx", "graphql", "handlebars" }`
- Methods: `formatting, range_formatting`
- Command: `prettier_d_slim`
- Args: dynamically resolved (see source
  <https://github.com/jose-elias-alvarez/null-ls.nvim/blob/main/lua/null-ls/builtins/formatting/prettier_d_slim.lua>)

                                                                              
NOTES                                                          *null-ls-notes*

- May not work on some filetypes.
- `prettierd` is more stable and recommended.

                                                                              
[PRETTIER_ESLINT](HTTPS://GITHUB.COM/PRETTIER/PRETTIER-ESLINT-CLI)*null-ls-[prettier_eslint](https://github.com/prettier/prettier-eslint-cli)*

CLI for prettier-eslint <https://github.com/prettier/prettier-eslint>


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.prettier_eslint }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "javascript", "javascriptreact", "typescript",
  "typescriptreact", "vue", "css", "scss", "less", "html", "json", "jsonc",
  "yaml", "markdown", "markdown.mdx", "graphql", "handlebars" }`
- Method: `formatting`
- Command: `prettier-eslint`
- Args: `{ "--stdin", "--stdin-filepath", "$FILENAME" }`

                                                                              
NOTES                                                          *null-ls-notes*

- Known Issues:
  https://github.com/idahogurl/vs-code-prettier-eslint/issues/72#issuecomment-1247516987

                                                                              
[PRETTIER_STANDARD](HTTPS://GITHUB.COM/SHEERUN/PRETTIER-STANDARD)*null-ls-[prettier_standard](https://github.com/sheerun/prettier-standard)*

Formats with Prettier and lints with ESLint+Standard! (✿◠‿◠)


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.prettier_standard }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "javascript", "javascriptreact" }`
- Method: `formatting`
- Command: `prettier-standard`
- Args: `{ "--stdin" }`

                                                                              
[PRISMAFMT](HTTPS://GITHUB.COM/PRISMA/PRISMA-ENGINES)*null-ls-[prismafmt](https://github.com/prisma/prisma-engines)*

Formatter for the prisma filetype.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.prismaFmt }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "prisma" }`
- Method: `formatting`
- Command: `prisma`
- Args: `{ "format", "$FILENAME" }`

                                                                              
[PROTOLINT](HTTPS://GITHUB.COM/YOHEIMUTA/PROTOLINT)*null-ls-[protolint](https://github.com/yoheimuta/protolint)*

A pluggable linter and fixer to enforce Protocol Buffer style and conventions.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.protolint }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "proto" }`
- Method: `formatting`
- Command: `protolint`
- Args: `{ "--fix", "$FILENAME" }`

                                                                              
[PTOP](HTTPS://WWW.FREEPASCAL.ORG/TOOLS/PTOP.HTML)*null-ls-[ptop](https://www.freepascal.org/tools/ptop.html)*

The FPC Pascal configurable source beautifier. Name means 'Pascal-TO-Pascal'.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.ptop }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "pascal", "delphi" }`
- Method: `formatting`
- Command: `ptop`
- Args: `{ "$FILENAME", "$FILENAME" }`

                                                                              
[PUPPET_LINT](HTTP://PUPPET-LINT.COM/)*null-ls-[puppet_lint](http://puppet-lint.com/)*

Check that your Puppet manifest conforms to the style guide


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.puppet_lint }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "puppet", "epuppet" }`
- Method: `formatting`
- Command: `puppet-lint`
- Args: `{ "--fix", "$FILENAME" }`

                                                                              
[PURS_TIDY](HTTPS://GITHUB.COM/NATEFAUBION/PURESCRIPT-TIDY)*null-ls-[purs_tidy](https://github.com/natefaubion/purescript-tidy)*

A syntax tidy-upper (formatter) for PureScript.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.purs_tidy }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "purescript" }`
- Method: `formatting`
- Command: `purs-tidy`
- Args: `{ "format" }`

                                                                              
NOTES                                                          *null-ls-notes*

- For installation, use npm: npm install -g purs-tidy

                                                                              
[PYFLYBY](HTTPS://GITHUB.COM/DESHAW/PYFLYBY)*null-ls-[pyflyby](https://github.com/deshaw/pyflyby)*

Pyflyby is a set of Python programming productivity tools, useful for
auto-import libraries


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.pyflyby }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "python" }`
- Method: `formatting`
- Command: `tidy-imports`
- Args: `{ "-n" }`

                                                                              
[PYINK](HTTPS://GITHUB.COM/GOOGLE/PYINK)*null-ls-[pyink](https://github.com/google/pyink)*

The Google Python code formatter


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.pyink }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "python" }`
- Methods: `formatting, range_formatting`
- Command: `pyink`
- Args: dynamically resolved (see source
  <https://github.com/jose-elias-alvarez/null-ls.nvim/blob/main/lua/null-ls/builtins/formatting/pyink.lua>)

                                                                              
[QMLFORMAT](HTTPS://DOC-SNAPSHOTS.QT.IO/QT6-DEV/QTQUICK-TOOLS-AND-UTILITIES.HTML#QMLFORMAT)*null-ls-[qmlformat](https://doc-snapshots.qt.io/qt6-dev/qtquick-tools-and-utilities.html#qmlformat)*

qmlformat is a tool that automatically formats QML files according to the QML
Coding Conventions.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.qmlformat }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "qml" }`
- Method: `formatting`
- Command: `qmlformat`
- Args: `{ "-i", "$FILENAME" }`

                                                                              
[RACKET_FIXW](HTTPS://GITHUB.COM/6CDH/RACKET-FIXW)*null-ls-[racket_fixw](https://github.com/6cdh/racket-fixw)*

A Racket formatter that add/remove some whitespaces but respects newline.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.racket_fixw }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "racket" }`
- Method: `formatting`
- Command: `raco`
- Args: `{ "fixw" }`

                                                                              
NOTES                                                          *null-ls-notes*

- Install with `raco pkg install fixw`

                                                                              
[RACO_FMT](HTTPS://DOCS.RACKET-LANG.ORG/FMT/)*null-ls-[raco_fmt](https://docs.racket-lang.org/fmt/)*

The fmt package provides an extensible tool to format Racket code, using an
expressive pretty printer library to compute the optimal layout.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.raco_fmt }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "racket" }`
- Method: `formatting`
- Command: `raco`
- Args: `{ "fmt" }`

                                                                              
NOTES                                                          *null-ls-notes*

- Requires Racket 8.0 or later
- Install with `raco pkg install fmt`

                                                                              
[REGO](HTTPS://WWW.OPENPOLICYAGENT.ORG/DOCS/LATEST/POLICY-LANGUAGE)*null-ls-[rego](https://www.openpolicyagent.org/docs/latest/policy-language)*

Rego (opa fmt) Formatter


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.rego }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "rego" }`
- Method: `formatting`
- Command: `opa`
- Args: `{ "fmt" }`

                                                                              
[REMARK](HTTPS://GITHUB.COM/REMARKJS/REMARK)*null-ls-[remark](https://github.com/remarkjs/remark)*

remark is an extensive and complex Markdown formatter/prettifier.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.remark }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "markdown" }`
- Method: `formatting`
- Command: `remark`
- Args: `{ "--no-color", "--silent" }`

                                                                              
NOTES                                                          *null-ls-notes*

- Depends on remark-cli
  <https://github.com/remarkjs/remark/tree/main/packages/remark-cli>.

                                                                              
[REORDER_PYTHON_IMPORTS](HTTPS://GITHUB.COM/ASOTTILE/REORDER_PYTHON_IMPORTS)*null-ls-[reorder_python_imports](https://github.com/asottile/reorder_python_imports)*

Tool for automatically reordering python imports. Similar to isort but uses
static analysis more.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.reorder_python_imports }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "python" }`
- Method: `formatting`
- Command: `reorder-python-imports`
- Args: `{ "-", "--exit-zero-even-if-changed" }`

                                                                              
[RESCRIPT](HTTPS://RESCRIPT-LANG.ORG/)*null-ls-[rescript](https://rescript-lang.org/)*

The ReScript format builtin.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.rescript }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "rescript" }`
- Method: `formatting`
- Command: `rescript`
- Args: dynamically resolved (see source
  <https://github.com/jose-elias-alvarez/null-ls.nvim/blob/main/lua/null-ls/builtins/formatting/rescript.lua>)

                                                                              
[ROME](HTTPS://ROME.TOOLS)                *null-ls-[rome](https://rome.tools)*

Formatter, linter, bundler, and more for JavaScript, TypeScript, JSON, HTML,
Markdown, and CSS.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.rome }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "javascript", "typescript", "javascriptreact",
  "typescriptreact", "json" }`
- Method: `formatting`
- Command: `rome`
- Args: `{ "format", "--write", "$FILENAME" }`

                                                                              
NOTES                                                          *null-ls-notes*

- Currently support only JavaScript, TypeScript and JSON. See status here
  <https://rome.tools/#language-support>

                                                                              
[RUBOCOP](HTTPS://GITHUB.COM/RUBOCOP/RUBOCOP)*null-ls-[rubocop](https://github.com/rubocop/rubocop)*

Ruby static code analyzer and formatter, based on the community Ruby style
guide.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.rubocop }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "ruby" }`
- Method: `formatting`
- Command: `rubocop`
- Args: `{ "-a", "-f", "quiet", "--stderr", "--stdin", "$FILENAME" }`

                                                                              
[RUBYFMT](HTTPS://GITHUB.COM/FABLES-TALES/RUBYFMT)*null-ls-[rubyfmt](https://github.com/fables-tales/rubyfmt)*

Format your Ruby code!


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.rubyfmt }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "ruby" }`
- Method: `formatting`
- Command: `rubyfmt`
- Args: `{}`

                                                                              
NOTES                                                          *null-ls-notes*

- Install to your PATH with `brew install rubyfmt`. Ensure you have the latest
  version.

                                                                              
[RUFF](HTTPS://GITHUB.COM/CHARLIERMARSH/RUFF/)*null-ls-[ruff](https://github.com/charliermarsh/ruff/)*

An extremely fast Python linter, written in Rust.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.ruff }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "python" }`
- Method: `formatting`
- Command: `ruff`
- Args: `{ "--fix", "-e", "-n", "--stdin-filename", "$FILENAME", "-" }`

                                                                              
[RUFO](HTTPS://GITHUB.COM/RUBY-FORMATTER/RUFO)*null-ls-[rufo](https://github.com/ruby-formatter/rufo)*

Opinionated ruby formatter.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.rufo }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "ruby" }`
- Method: `formatting`
- Command: `rufo`
- Args: `{ "-x" }`

                                                                              
[RUSTFMT](HTTPS://GITHUB.COM/RUST-LANG/RUSTFMT)*null-ls-[rustfmt](https://github.com/rust-lang/rustfmt)*

A tool for formatting rust code according to style guidelines.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.rustfmt }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "rust" }`
- Method: `formatting`
- Command: `rustfmt`
- Args: `{ "--emit=stdout" }`

                                                                              
NOTES                                                          *null-ls-notes*

- `--edition` defaults to `2015`. To set a different edition, use
  `extra_args`.
- See the wiki
  <https://github.com/jose-elias-alvarez/null-ls.nvim/wiki/Source-specific-Configuration#rustfmt>
  for other workarounds.

                                                                              
[RUSTYWIND](HTTPS://GITHUB.COM/AVENCERA/RUSTYWIND)*null-ls-[rustywind](https://github.com/avencera/rustywind)*

CLI for organizing Tailwind CSS classes.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.rustywind }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "javascript", "javascriptreact", "typescript",
  "typescriptreact", "vue", "svelte", "html" }`
- Method: `formatting`
- Command: `rustywind`
- Args: `{ "--stdin" }`

                                                                              
[SCALAFMT](HTTPS://GITHUB.COM/SCALAMETA/SCALAFMT)*null-ls-[scalafmt](https://github.com/scalameta/scalafmt)*

Code formatter for Scala


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.scalafmt }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "scala" }`
- Method: `formatting`
- Command: `scalafmt`
- Args: `{ "--stdin" }`

                                                                              
[SEMISTANDARDJS](HTTPS://STANDARDJS.COM/)*null-ls-[semistandardjs](https://standardjs.com/)*

JavaScript Standard Style, a no-configuration automatic code formatter that
just works.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.semistandardjs }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "javascript", "javascriptreact" }`
- Method: `formatting`
- Command: `semistandard`
- Args: `{ "--stdin", "--fix" }`

                                                                              
[SHELLHARDEN](HTTPS://GITHUB.COM/ANORDAL/SHELLHARDEN)*null-ls-[shellharden](https://github.com/anordal/shellharden)*

Hardens shell scripts by quoting variables, replacing `function_call` with
`$(function_call)`, and more.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.shellharden }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "sh" }`
- Method: `formatting`
- Command: `shellharden`
- Args: `{ "--transform", "" }`

                                                                              
[SHFMT](HTTPS://GITHUB.COM/MVDAN/SH)*null-ls-[shfmt](https://github.com/mvdan/sh)*

A shell parser, formatter, and interpreter with `bash` support.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.shfmt }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "sh" }`
- Method: `formatting`
- Command: `shfmt`
- Args: `{ "-filename", "$FILENAME" }`

                                                                              
[SMLFMT](HTTPS://GITHUB.COM/SHWESTRICK/SMLFMT)*null-ls-[smlfmt](https://github.com/shwestrick/smlfmt)*

A custom parser/auto-formatter for Standard ML


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.smlfmt }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "sml" }`
- Method: `formatting`
- Command: `smlfmt`
- Args: `{ "--force", "$FILENAME" }`

                                                                              
[SQLFLUFF](HTTPS://GITHUB.COM/SQLFLUFF/SQLFLUFF)*null-ls-[sqlfluff](https://github.com/sqlfluff/sqlfluff)*

A SQL linter and auto-formatter for Humans


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = {
        null_ls.builtins.formatting.sqlfluff.with({
            extra_args = { "--dialect", "postgres" }, -- change to your dialect
        }),
    }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "sql" }`
- Method: `formatting`
- Command: `sqlfluff`
- Args: `{ "fix", "--disable-progress-bar", "-f", "-n", "-" }`

                                                                              
NOTES                                                          *null-ls-notes*

- SQLFluff needs a mandatory `--dialect` argument. Use `extra_args` to add
  yours. `extra_args` can also be a function to build more sophisticated
  logic.

                                                                              
[SQLFMT](HTTPS://SQLFMT.COM/)          *null-ls-[sqlfmt](https://sqlfmt.com/)*

Formats your dbt SQL files so you don't have to


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.sqlfmt }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "sql", "jinja" }`
- Method: `formatting`
- Command: `sqlfmt`
- Args: `{ "-" }`

                                                                              
NOTES                                                          *null-ls-notes*

- Install sqlfmt with `pip install shandy-sqlfmt[jinjafmt]`

                                                                              
[SQLFORMAT](HTTPS://MANPAGES.UBUNTU.COM/MANPAGES/XENIAL/MAN1/SQLFORMAT.1.HTML)*null-ls-[sqlformat](https://manpages.ubuntu.com/manpages/xenial/man1/sqlformat.1.html)*

The sqlformat command-line tool can reformat SQL files according to specified
options.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.sqlformat }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "sql" }`
- Method: `formatting`
- Command: `sqlformat`
- Args: `{ "-" }`

                                                                              
[SQL_FORMATTER](HTTPS://GITHUB.COM/SQL-FORMATTER-ORG/SQL-FORMATTER)*null-ls-[sql_formatter](https://github.com/sql-formatter-org/sql-formatter)*

A whitespace formatter for different query languages


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.sql_formatter }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "sql" }`
- Method: `formatting`
- Command: `sql-formatter`

                                                                              
[STANDARDJS](HTTPS://STANDARDJS.COM/)*null-ls-[standardjs](https://standardjs.com/)*

JavaScript Standard Style, a no-configuration automatic code formatter that
just works.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.standardjs }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "javascript", "javascriptreact" }`
- Method: `formatting`
- Command: `standard`
- Args: `{ "--stdin", "--fix" }`

                                                                              
[STANDARDRB](HTTPS://GITHUB.COM/TESTDOUBLE/STANDARD)*null-ls-[standardrb](https://github.com/testdouble/standard)*

Ruby Style Guide, with linter & automatic code fixer. Based on Rubocop.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.standardrb }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "ruby" }`
- Method: `formatting`
- Command: `standardrb`
- Args: `{ "--fix", "--format", "quiet", "--stderr", "--stdin", "$FILENAME" }`

                                                                              
[STANDARDTS](HTTPS://STANDARDJS.COM/#TYPESCRIPT)*null-ls-[standardts](https://standardjs.com/#typescript)*

JavaScript Standard Style, a no-configuration automatic code formatter that
just works.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.standardts }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "typescript", "typescriptreact" }`
- Method: `formatting`
- Command: `ts-standard`
- Args: `{ "--stdin", "--fix" }`

                                                                              
[STYLELINT](HTTPS://GITHUB.COM/STYLELINT/STYLELINT)*null-ls-[stylelint](https://github.com/stylelint/stylelint)*

A mighty, modern linter that helps you avoid errors and enforce conventions in
your styles.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.stylelint }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "scss", "less", "css", "sass" }`
- Method: `formatting`
- Command: `stylelint`
- Args: `{ "--fix", "--stdin", "--stdin-filename", "$FILENAME" }`

                                                                              
[STYLER](HTTPS://GITHUB.COM/R-LIB/STYLER)*null-ls-[styler](https://github.com/r-lib/styler)*

Non-invasive pretty printing of R code.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.styler }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "r", "rmd" }`
- Method: `formatting`
- Command: `R`
- Args: dynamically resolved (see source
  <https://github.com/jose-elias-alvarez/null-ls.nvim/blob/main/lua/null-ls/builtins/formatting/styler.lua>)

                                                                              
[STYLISH_HASKELL](HTTPS://GITHUB.COM/HASKELL/STYLISH-HASKELL)*null-ls-[stylish_haskell](https://github.com/haskell/stylish-haskell)*

Format Haskell code


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.stylish_haskell }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "haskell" }`
- Method: `formatting`
- Command: `stylish-haskell`
- Args: `{}`

                                                                              
[STYLUA](HTTPS://GITHUB.COM/JOHNNYMORGANZ/STYLUA)*null-ls-[stylua](https://github.com/johnnymorganz/stylua)*

An opinionated code formatter for Lua.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.stylua }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "lua", "luau" }`
- Methods: `formatting, range_formatting`
- Command: `stylua`
- Args: dynamically resolved (see source
  <https://github.com/jose-elias-alvarez/null-ls.nvim/blob/main/lua/null-ls/builtins/formatting/stylua.lua>)

                                                                              
[SURFACE](HTTPS://HEXDOCS.PM/SURFACE_FORMATTER/README.HTML)*null-ls-[surface](https://hexdocs.pm/surface_formatter/readme.html)*

A code formatter for Surface, the server-side rendering component library for
Phoenix.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.surface }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "elixir", "surface" }`
- Method: `formatting`
- Command: `mix`
- Args: `{ "surface.format", "-" }`

                                                                              
[SWIFTFORMAT](HTTPS://GITHUB.COM/NICKLOCKWOOD/SWIFTFORMAT)*null-ls-[swiftformat](https://github.com/nicklockwood/swiftformat)*

SwiftFormat is a code library and command-line tool for reformatting `swift`
code on macOS or Linux.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.swiftformat }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "swift" }`
- Method: `formatting`
- Command: `swiftformat`
- Args: `{ "--stdinpath", "$FILENAME" }`

                                                                              
[SWIFTLINT](HTTPS://GITHUB.COM/REALM/SWIFTLINT)*null-ls-[swiftlint](https://github.com/realm/swiftlint)*

A tool to enforce Swift style and conventions.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.swiftlint }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "swift" }`
- Method: `formatting`
- Command: `swiftlint`
- Args: `{ "lint", "--use-stdin", "--fix" }`

                                                                              
[SWIFT_FORMAT](HTTPS://GITHUB.COM/APPLE/SWIFT-FORMAT)*null-ls-[swift_format](https://github.com/apple/swift-format)*

Swift formatter from apple. Requires building from source with `swift build`


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.swift_format }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "swift" }`
- Method: `formatting`
- Command: `swift-format`
- Args: `{}`

                                                                              
[TAPLO](HTTPS://TAPLO.TAMASFE.DEV/)*null-ls-[taplo](https://taplo.tamasfe.dev/)*

A versatile, feature-rich TOML toolkit.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.taplo }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "toml" }`
- Method: `formatting`
- Command: `taplo`
- Args: `{ "format", "-" }`

                                                                              
[TERRAFMT](HTTPS://GITHUB.COM/KATBYTE/TERRAFMT)*null-ls-[terrafmt](https://github.com/katbyte/terrafmt)*

The terrafmt command formats `terraform` blocks embedded in Markdown files.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.terrafmt }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "markdown" }`
- Method: `formatting`
- Command: `terrafmt`
- Args: `{ "fmt", "$FILENAME" }`

                                                                              
[TERRAFORM_FMT](HTTPS://WWW.TERRAFORM.IO/DOCS/CLI/COMMANDS/FMT.HTML)*null-ls-[terraform_fmt](https://www.terraform.io/docs/cli/commands/fmt.html)*

The terraform-fmt command rewrites `terraform` configuration files to a
canonical format and style.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.terraform_fmt }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "terraform", "tf", "terraform-vars" }`
- Method: `formatting`
- Command: `terraform`
- Args: `{ "fmt", "-" }`

                                                                              
[TEXTLINT](HTTPS://GITHUB.COM/TEXTLINT/TEXTLINT)*null-ls-[textlint](https://github.com/textlint/textlint)*

The pluggable linting tool for text and Markdown.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.textlint }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "txt", "markdown" }`
- Method: `formatting`
- Command: `textlint`
- Args: `{ "--fix", "$FILENAME" }`

                                                                              
[TIDY](HTTPS://WWW.HTML-TIDY.ORG/)*null-ls-[tidy](https://www.html-tidy.org/)*

Tidy corrects and cleans up HTML and XML documents by fixing markup errors and
upgrading legacy code to modern standards.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.tidy }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "html", "xml" }`
- Method: `formatting`
- Command: `tidy`
- Args: `{ "--tidy-mark", "no", "-quiet", "-indent", "-wrap", "-" }`

                                                                              
[TOPIARY](HTTPS://GITHUB.COM/TWEAG/TOPIARY)*null-ls-[topiary](https://github.com/tweag/topiary)*

A uniform formatter for simple languages


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.topiary }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "ncl", "nickel" }`
- Method: `formatting`
- Command: `topiary`
- Args: `{ "-i", "-f", "$FILENAME" }`

                                                                              
[TREEFMT](HTTPS://GITHUB.COM/NUMTIDE/TREEFMT)*null-ls-[treefmt](https://github.com/numtide/treefmt)*

One CLI to format your repo


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = {
        null_ls.builtins.formatting.treefmt.with({
            -- treefmt requires a config file
            condition = function(utils)
                return utils.root_has_file("treefmt.toml")
            end,
        }),
    }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{}`
- Method: `formatting`
- Command: `treefmt`
- Args: `{ "--allow-missing-formatter", "--stdin", "$FILENAME" }`

                                                                              
TRIM_NEWLINES                                          *null-ls-trim_newlines*

A simple wrapper around `awk` to remove trailing newlines.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.trim_newlines }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{}`
- Method: `formatting`
- Command: `awk`
- Args: `{ 'NF{print s $0; s=""; next} {s=s ORS}' }`

                                                                              
TRIM_WHITESPACE                                      *null-ls-trim_whitespace*

A simple wrapper around `awk` to remove trailing whitespace.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.trim_whitespace }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{}`
- Method: `formatting`
- Command: `awk`
- Args: `{ '{ sub(/[ \t]+$/, ""); print }' }`

                                                                              
[UNCRUSTIFY](HTTPS://GITHUB.COM/UNCRUSTIFY/UNCRUSTIFY)*null-ls-[uncrustify](https://github.com/uncrustify/uncrustify)*

A source code beautifier for C, C++, C#, ObjectiveC, D, Java, Pawn and Vala.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.uncrustify }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "c", "cpp", "cs", "java" }`
- Method: `formatting`
- Command: `uncrustify`
- Args: dynamically resolved (see source
  <https://github.com/jose-elias-alvarez/null-ls.nvim/blob/main/lua/null-ls/builtins/formatting/uncrustify.lua>)

                                                                              
[USORT](HTTPS://GITHUB.COM/FACEBOOKEXPERIMENTAL/USORT)*null-ls-[usort](https://github.com/facebookexperimental/usort)*

Safe, minimal import sorting for Python projects.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.usort }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "python" }`
- Method: `formatting`
- Command: `usort`
- Args: `{ "format", "-" }`

                                                                              
[VERIBLE_VERILOG_FORMAT](HTTPS://GITHUB.COM/CHIPSALLIANCE/VERIBLE)*null-ls-[verible_verilog_format](https://github.com/chipsalliance/verible)*

The verible-verilog-format formatter manages whitespace in accordance with a
particular style. The main goal is to relieve humans of having to manually
manage whitespace, wrapping, and indentation, and to provide a tool that can
be integrated into any editor to enable editor-independent consistency.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.verible_verilog_format }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "verilog", "systemverilog" }`
- Method: `formatting`
- Command: `verible-verilog-format`
- Args: `{ "--stdin_name", "$FILENAME", "-" }`

                                                                              
[XMLFORMAT](HTTPS://GITHUB.COM/PAMOLLER/XMLFORMATTER)*null-ls-[xmlformat](https://github.com/pamoller/xmlformatter)*

xmlformatter is an Open Source Python package, which provides formatting of
XML documents.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.xmlformat }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "xml" }`
- Method: `formatting`
- Command: `xmlformat`
- Args: `{ "-" }`

                                                                              
[XMLLINT](HTTP://XMLSOFT.ORG/XMLLINT.HTML)*null-ls-[xmllint](http://xmlsoft.org/xmllint.html)*

Despite the name, xmllint can be used to format XML files as well as lint
them, and that's the mode this builtin is using.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.xmllint }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "xml" }`
- Method: `formatting`
- Command: `xmllint`
- Args: `{ "--format", "-" }`

                                                                              
[XQ](HTTPS://GITHUB.COM/SIBPROGRAMMER/XQ)*null-ls-[xq](https://github.com/sibprogrammer/xq)*

Command-line XML and HTML beautifier and content extractor


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.xq }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "xml" }`
- Method: `formatting`
- Command: `xq`
- Args: `{ ".", "$FILENAME" }`

                                                                              
[YAMLFIX](HTTPS://GITHUB.COM/LYZ-CODE/YAMLFIX)*null-ls-[yamlfix](https://github.com/lyz-code/yamlfix)*

A configurable YAML formatter that keeps comments.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.yamlfix }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "yaml" }`
- Method: `formatting`
- Command: `yamlfix`
- Args: `{ "-" }`

                                                                              
[YAMLFMT](HTTPS://GITHUB.COM/GOOGLE/YAMLFMT)*null-ls-[yamlfmt](https://github.com/google/yamlfmt)*

yamlfmt is an extensible command line tool or library to format yaml files.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.yamlfmt }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "yaml" }`
- Method: `formatting`
- Command: `yamlfmt`
- Args: `{ "-" }`

                                                                              
[YAPF](HTTPS://GITHUB.COM/GOOGLE/YAPF)*null-ls-[yapf](https://github.com/google/yapf)*

Formatter for Python.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.yapf }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "python" }`
- Methods: `formatting, range_formatting`
- Command: `yapf`
- Args: dynamically resolved (see source
  <https://github.com/jose-elias-alvarez/null-ls.nvim/blob/main/lua/null-ls/builtins/formatting/yapf.lua>)

                                                                              
[YQ](HTTPS://GITHUB.COM/MIKEFARAH/YQ)*null-ls-[yq](https://github.com/mikefarah/yq)*

yq is a portable command-line YAML, JSON, XML, CSV and properties processor.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.yq }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "yml", "yaml" }`
- Method: `formatting`
- Command: `yq`
- Args: `{ ".", "$FILENAME" }`

                                                                              
[ZIGFMT](HTTPS://GITHUB.COM/ZIGLANG/ZIG)*null-ls-[zigfmt](https://github.com/ziglang/zig)*

Reformat Zig source into canonical form.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.zigfmt }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "zig" }`
- Method: `formatting`
- Command: `zig`
- Args: `{ "fmt", "--stdin" }`

                                                                              
[ZPRINT](HTTPS://GITHUB.COM/KKINNEAR/ZPRINT)*null-ls-[zprint](https://github.com/kkinnear/zprint)*

Beautifully format Clojure and Clojurescript source code and s-expressions.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.formatting.zprint }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "clojure" }`
- Method: `formatting`
- Command: `zprint`

                                                                              
NOTES                                                          *null-ls-notes*

- Requires that `zprint` is executable and on $PATH.

------------------------------------------------------------------------------
HOVER                                                          *null-ls-hover*



                                                                              
[DICTIONARY](HTTPS://DICTIONARYAPI.DEV/)*null-ls-[dictionary](https://dictionaryapi.dev/)*

Shows the first available definition for the current word under the cursor.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.hover.dictionary }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "org", "text", "markdown" }`
- Method: `hover`

                                                                              
NOTES                                                          *null-ls-notes*

- Depends on Plenary's `curl` module, which itself depends on having `curl`
  installed and available on your `$PATH`.

                                                                              
PRINTENV                                                    *null-ls-printenv*

Shows the value for the current environment variable under the cursor.


                                                                              
USAGE                                                          *null-ls-usage*

>lua
    local sources = { null_ls.builtins.hover.printenv }
<

                                                                              
DEFAULTS                                                    *null-ls-defaults*

- Filetypes: `{ "sh", "dosbatch", "ps1" }`
- Method: `hover`

                                                                              
NOTES                                                          *null-ls-notes*

- This source is similar in function to `printenv` where it shows value of
  environment variable, however this source uses `vim.loop.os_getenv` instead
  of `printenv` thus making it cross-platform.

vim:tw=78:ts=8:ft=help:norl: